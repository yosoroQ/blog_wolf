/*
 Navicat Premium Data Transfer

 Source Server         : root
 Source Server Type    : MySQL
 Source Server Version : 80029
 Source Host           : localhost:3307
 Source Schema         : blog_wolf

 Target Server Type    : MySQL
 Target Server Version : 80029
 File Encoding         : 65001

 Date: 03/11/2022 22:05:16
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for t_blog
-- ----------------------------
DROP TABLE IF EXISTS `t_blog`;
CREATE TABLE `t_blog`  (
  `id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'ID',
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标题',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '描述',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '内容',
  `views` int(0) NULL DEFAULT NULL COMMENT '浏览次数',
  `published` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否发表',
  `create_time` datetime(0) NULL DEFAULT NULL COMMENT '创建时间',
  `title_image` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '题图',
  `user_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '作者',
  `category_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '分类',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `author`(`user_id`) USING BTREE,
  INDEX `category`(`category_id`) USING BTREE,
  INDEX `category_id`(`category_id`) USING BTREE,
  INDEX `author_id`(`user_id`) USING BTREE,
  CONSTRAINT `t_blog_category` FOREIGN KEY (`category_id`) REFERENCES `t_category` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `t_blog_user` FOREIGN KEY (`user_id`) REFERENCES `t_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_blog
-- ----------------------------
INSERT INTO `t_blog` VALUES ('1', ' MyBatisPlus', ' MyBatisPlus', 'MyBatisPlus\n<!--more-->\n\n\n# 学习目标\n\n* 基于MyBatisPlus完成标准Dao开发\n\n# 一、MyBatisPlus简介\n\n## 1.1 入门案例\n\n### （1）创建数据库及表\n\n```sql\ncreate database if not exists mybatisplus_db character set utf8;\n    use mybatisplus_db;\n    CREATE TABLE user (\n    id bigint(20) primary key auto_increment,\n    name varchar(32) not null,\n    password varchar(32) not null,\n    age int(3) not null ,\n    tel varchar(32) not null\n    );\n    insert into user values(1,\'Tom\',\'tom\',3,\'18866668888\');\n    insert into user values(2,\'Jerry\',\'jerry\',4,\'16688886666\');\n    insert into user values(3,\'Jock\',\'123456\',41,\'18812345678\');\n    insert into user values(4,\'li\',\'itcast\',15,\'4006184000\');\n```\n\n### （2）创建SpringBoot工程 - 配置使用技术\n\n* ![image-20220906160139489](http://qny.expressisland.cn/schoolOpens/image-20220906160139489.png)\n\n### （3）pom.xml（添加druid数据源）\n\n* druid数据源可以加也可以不加，SpringBoot有内置的数据源，可以配置成使用Druid数据源。\n\n```xml\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>druid</artifactId>\n    <version>1.1.16</version>\n</dependency>\n```\n\n### （4）application.yml（配置数据库连接）\n\n```yaml\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3307/mybatisplus_db?serverTimezone=UTC\n    username: root\n    password: 1234\n```\n\n### （5）创建实体类\n\n```java\npackage com.li.domain;\n\npublic class User {\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public String getTel() {\n        return tel;\n    }\n\n    public void setTel(String tel) {\n        this.tel = tel;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", name=\'\" + name + \'\\\'\' +\n                \", password=\'\" + password + \'\\\'\' +\n                \", age=\" + age +\n                \", tel=\'\" + tel + \'\\\'\' +\n                \'}\';\n    }\n\n    private Long id;\n    private String name;\n    private String password;\n    private Integer age;\n    private String tel;\n}\n```\n\n### （6）创建Dao接口\n\n* 继承`BaseMapper<User>`\n\n```java\n@Mapper\n//继承“extends BaseMapper<User>”\npublic interface UserDao extends BaseMapper<User> {\n}\n```\n\n### （7）编写测试类\n\n```java\n@SpringBootTest\nclass MpDemo1ApplicationTests {\n\n    @Autowired\n    private UserDao userDao;\n\n    @Test\n    public void testGetAll(){\n        List<User> userList = userDao.selectList(null);\n        System.out.println(userList);\n    }\n}\n```\n\n### （8）运行测试类\n\n* ![image-20220906160609676](http://qny.expressisland.cn/schoolOpens/image-20220906160609676.png)\n\n## 1.2 MyBatisPlus特性\n\n* 无侵入：只做增强不做改变，不会对现有工程产生影响\n* 强大的 CRUD 操作：内置通用 Mapper，少量配置即可实现单表CRUD操作\n* 支持 Lambda：编写查询条件无需担心字段写错\n* 支持主键自动生成\n* 内置分页插件\n\n# 二、标准数据层开发\n\n## 2.1 标准数据层CRUD功能\n\n### 2.1.1 标准的CRUD功能（mybatisplus接口）\n\n* ![image-20220906162822617](http://qny.expressisland.cn/schoolOpens/image-20220906162822617.png)\n\n### 2.1.2 实例\n\n#### （1）新增\n\n* ![image-20220906163101113](http://qny.expressisland.cn/schoolOpens/image-20220906163101113.png)\n\n```java\n@Test\n// 新增\nvoid testSave(){\n    User user = new User();\n    user.setName(\"wangwu\");\n    user.setPassword(\"99999999\");\n    user.setAge(820);\n    user.setTel(\"189\");\n    userDao.insert(user);\n}\n```\n\n#### （2）删除\n\n* ![image-20220906163145086](http://qny.expressisland.cn/schoolOpens/image-20220906163145086.png)\n\n```java\n//    1567064852546011137\n//刚刚新增的ID\n\n    @Test\n    //删除\n    void tsetDelete(){\n        //提示数值过大，则在数后加“L”\n        userDao.deleteById(1567064852546011137L);\n    }\n```\n\n#### （3）修改\n\n* ![image-20220906163317161](http://qny.expressisland.cn/schoolOpens/image-20220906163317161.png)\n* 修改的时候，只修改实体对象中有值的字段。\n\n```java\n@Test\n//修改\nvoid testUpadte(){\n    User user = new User();\n    user.setId(1L);\n    user.setName(\"gogogo\");\n    user.setPassword(\"9993434343999\");\n    user.setAge(991);\n    userDao.updateById(user);\n}\n```\n\n#### （4）根据ID查询\n\n* ![image-20220906163355041](http://qny.expressisland.cn/schoolOpens/image-20220906163355041.png)\n\n```java\n@Test\n//根据ID查询\nvoid testGetById(){\n    User user = userDao.selectById(2L);\n    System.out.println(user);\n}\n```\n\n#### （5）查询所有\n\n* ![image-20220906163421710](http://qny.expressisland.cn/schoolOpens/image-20220906163421710.png)\n* 我们所调用的方法都是来自于DAO接口继承的`BaseMapper`类中。\n\n```java\n@Test\n//查询所有\npublic void testGetAll(){\n    List<User> userList = userDao.selectList(null);\n    System.out.println(userList);\n}\n```\n\n### 2.1.3 Lombok\n\n* 简写模型类的编写。\n\n  * 私有属性\n  * setter...getter...方法\n  * toString方法 \n  * 构造函数\n\n* 利用Lombok就可以不用编写了。\n\n* Lombok，一个Java类库，提供了一组注解，简化POJO实体类开发。\n\n#### （1）添加lombok依赖\n\n* 版本可以不用写，因为SpringBoot中已经管理了lombok的版本。\n* 如果删除setter和getter方法程序有报红，则需要安装Lombok插件。\n\n```xml\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <!--<version>1.18.12</version>-->\n</dependency>\n```\n\n#### （2）模型类上添加注解\n\n* Lombok常见的注解有：**（加粗的是比较常用的）**\n  * @Setter：为模型类的属性提供setter方法 \n  * @Getter：为模型类的属性提供getter方法 \n  * @ToString：为模型类的属性提供toString方法\n  * @EqualsAndHashCode：为模型类的属性提供equals和hashcode方法\n  * **@Data：是个组合注解，包含上面的注解的功能**\n  * **@NoArgsConstructor：提供一个无参构造函数**\n  * **@AllArgsConstructor：提供一个包含所有参数的构造函数**\n\n#### （3）实例\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n    private Long id;\n    private String name;\n    private String password;\n    private Integer age;\n    private String tel;\n\n    //@Data是个组合注解，包含上面的注解的功能\n    //@NoArgsConstructor:提供一个无参构造函数\n    //@AllArgsConstructor:提供一个包含所有参数的构造函数\n}\n```\n\n#### （4）如果我只想要某个字段的构造函数-实例\n\n* 例如name和 password的构造函数。\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n    private Long id;\n    private String name;\n    private String password;\n    private Integer age;\n    private String tel;\n\n    public User(String name, String password) {\n        this.name = name;\n        this.password = password;\n    }\n\n}\n```\n\n## 2.2 分页功能\n\n### （1）分页查询使用的方法\n\n* ![image-20220906170505941](http://qny.expressisland.cn/schoolOpens/image-20220906170505941.png)\n\n### （2）调用方法传入参数获取返回值\n\n```java\n @Test\n    //分页查询\n    void testSelectPage(){\n        //创建IPage分页对象,设置分页参数,1为当前页码，2为每页显示的记录数\n        IPage<User> page = new Page<>(1,2);\n        //2 执行分页查询\n        userDao.selectPage(page,null);\n        //获取分页结果\n        System.out.println(\"当前页码值\" + page.getCurrent());\n        System.out.println(\"每页显示多少数\" + page.getSize());\n        System.out.println(\"一共多少页\" + page.getPages());\n        System.out.println(\"一共多少数据\" + page.getTotal());\n        System.out.println(\"数据\" + page.getRecords());\n    }\n```\n\n### （3）设置分页拦截器\n\n```java\n@Configuration\npublic class MybatisPlusConfig {\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor(){\n            //1 创建MybatisPlusInterceptor拦截器对象\n        MybatisPlusInterceptor mpInterceptor=new MybatisPlusInterceptor();\n            //2 添加分页拦截器\n        mpInterceptor.addInnerInterceptor(new PaginationInnerInterceptor());\n        return mpInterceptor;\n    }\n}\n```\n\n### （4）运行测试程序\n\n* ![image-20220906170840312](http://qny.expressisland.cn/schoolOpens/image-20220906170840312.png)\n\n### （5）如果想查看MP执行的SQL语句\n\n* 如果想查看MP执行的SQL语句，可以修改application.yml配置文件\n\n```yaml\nmybatis-plus:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #打印SQL日志到控制台\n```\n\n* **打开日志后，就可以在控制台打印出对应的SQL语句，开启日志功能性能就会受到影响，调试完后记得关闭**。\n* ![image-20220906170947665](http://qny.expressisland.cn/schoolOpens/image-20220906170947665.png)\n\n\n\n# 三、DQL控制\n\n## 3.1 条件查询方式\n\n### 3.1.1  条件查询的类\n\n* MyBatisPlus将书写复杂的SQL查询条件进行了封装，使用编程的形式完成查询条件的组合。\n* ![image-20220906184708641](http://qny.expressisland.cn/schoolOpens/image-20220906184708641.png)\n\n### 3.1.2 取消初始化spring日志打印（可选）\n\n* resources目录下新建添加`logback.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n</configuration>\n```\n\n### 3.1.3 构建条件查询\n\n#### （1）QueryWrapper\n\n```java\n@Test\n//查询所有-QueryWrapper\npublic void testGetAll_two(){\n    QueryWrapper qw = new QueryWrapper();\n    //lt: 小于(<)\n    qw.lt(\"age\",50);\n    List<User> userList = userDao.selectList(qw);\n    System.out.println(userList);\n}\n```\n\n* `lt`: 小于(<) 。\n* 最终的sql语句为: `SELECT id,name,password,age,tel FROM user WHERE (age < ?)`\n* `gt`: 大于(＞) 。\n* 最终的sql语句为：`SELECT id,name,password,age,tel FROM user WHERE (age < ? AND age > ?)`\n\n#### （2）QueryWrapper的基础上使用lambda**（推荐）**\n\n```java\n@Test\n//QueryWrapper的基础上使用lambda\npublic void testGetAll_three(){\n    QueryWrapper<User> qw = new QueryWrapper<User>();\n    qw.lambda().lt(User::getAge,50);\n    List<User> userList = userDao.selectList(qw);\n    System.out.println(userList);\n}\n```\n\n* User::getAget,为lambda表达式中的，类名::方法名。\n* 最终的sql语句为：`SELECT id,name,password,age,tel FROM user WHERE (age < ?)`\n* 注意：构建LambdaQueryWrapper的时候泛型不能省。\n\n#### （3）LambdaQueryWrapper**（推荐）**\n\n```java\n@Test\n//LambdaQueryWrapper\npublic void testGetAll_four(){\n    LambdaQueryWrapper<User> lqw = new LambdaQueryWrapper<User>();\n    lqw.lt(User::getAge,50);\n    List<User> userList = userDao.selectList(lqw);\n    System.out.println(userList);\n}\n```\n\n### 3.1.4 多条件构建\n\n* 需求：查询数据库表中，年龄在10岁到30岁之间的用户信息。\n\n```java\n@Test\n// 多条件构建\npublic void testGetAll_five(){\n    LambdaQueryWrapper<User> lqw = new LambdaQueryWrapper<User>();\n    //lt: 小于(<)\n    //gt：大于(>)\n    lqw.lt(User::getAge,50);\n    lqw.gt(User::getAge,20);\n    List<User> userList = userDao.selectList(lqw);\n    System.out.println(userList);\n}\n```\n\n* 构建多条件的时候，可以支持**链式编程**。\n\n```java\n@Test\n// 多条件构建 - 链式编程\npublic void testGetAll_six(){\n    LambdaQueryWrapper<User> lqw = new LambdaQueryWrapper<User>();\n    //lt: 小于(<)\n    //gt：大于(>)\n    lqw.lt(User::getAge,50).gt(User::getAge,20);\n    List<User> userList = userDao.selectList(lqw);\n    System.out.println(userList);\n}\n```\n\n* 需求：查询数据库表中，年龄小于10或年龄大于30的数据。\n\n```java\n@Test\n// 多条件构建 - 链式编程-“或者”条件\npublic void testGetAll_seven(){\n    LambdaQueryWrapper<User> lqw = new LambdaQueryWrapper<User>();\n    //lt: 小于(<)\n    //gt：大于(>)\n    lqw.lt(User::getAge,50).or().gt(User::getAge,20);\n    List<User> userList = userDao.selectList(lqw);\n    System.out.println(userList);\n}\n```\n\n* `or()`就相当于我们sql语句中的or关键字，不加默认是and。\n* 最终的sql语句为：`SELECT id,name,password,age,tel FROM user WHERE (age < ? OR age > ?)`\n\n### 3.1.5 null判定\n\n#### （1）案例\n\n* ![image-20220906191339564](http://qny.expressisland.cn/schoolOpens/image-20220906191339564.png)\n* 后台如果想接收前端的两个数据，该如何接收？\n* 新建一个模型类，让其继承User类，并在其中添加age2属性，UserQuery在拥有User属性后同时添加了age2属性。\n\n```java\n@Data\npublic class UserQuery extends User {\n    private Integer age2;\n}\n```\n\n#### （2）实例\n\n* `lt()`方法\n* condition为boolean类型，返回true，则添加条件，返回false则不添加条件。\n* ![image-20220906191603400](http://qny.expressisland.cn/schoolOpens/image-20220906191603400.png)\n\n```mysql\n@Test\n//null判定\npublic void testGetAll_eight(){\n    //模拟页面传递过来的查询数据\n    UserQuery uq = new UserQuery();\n    uq.setAge(10);\n    uq.setAge2(30);\n    LambdaQueryWrapper<User> lqw = new LambdaQueryWrapper<User>();\n    lqw.lt(null!=uq.getAge2(),User::getAge, uq.getAge2());\n    lqw.gt(null!=uq.getAge(),User::getAge, uq.getAge());\n    List<User> userList = userDao.selectList(lqw);\n    System.out.println(userList);\n}\n```\n\n## 3.2 查询投影\n\n### 3.2.1 查询指定字段\n\n* 目前我们在查询数据的时候，什么都没有做默认就是查询表中所有字段的内容，我们所说的查询投影，即不查询所有字段，只查询出指定内容的数据。\n\n#### 实例（1）\n\n* `select(...)`方法用来设置查询的字段列，可以设置多个\n* 最终的sql语句为：`SELECT id,name,age FROM user`\n\n```java\n@Test\n    //查询指定字段\n    public void testGetAll_nine(){\n        LambdaQueryWrapper<User> lqw = new LambdaQueryWrapper<User>();\n        //select(...)方法用来设置查询的字段列，可以设置多个\n        lqw.select(User::getAge,User::getName,User::getAge);\n        List<User> userList = userDao.selectList(lqw);\n        System.out.println(userList);\n    }\n```\n\n#### 实例（2）\n\n* 如果使用的不是lambda，就需要手动指定字段。\n* `QueryWrapper`\n\n```java\n@Test\n//查询指定字段-非lambda(QueryWrapper)\n//需要手动指定字段\npublic void testGetAll_ten(){\n    QueryWrapper<User> lqw = new QueryWrapper<User>();\n    lqw.select(\"id\",\"name\",\"age\",\"tel\");\n    List<User> userList = userDao.selectList(lqw);\n    System.out.println(userList);\n}\n```\n\n### 3.2.2 聚合查询\n\n> * 聚合函数查询\n> * count、max、min、avg、sum的使用\n>   * count：总记录数\n>   * max：最大值\n>   * min：最小值\n>   * avg：平均值\n>   * sum：求和\n> * count：`SELECT count(*) as count FROM user`\n> * max：`SELECT max(age) as maxAge FROM user`\n> * min：`SELECT min(age) as minAge FROM user`\n> * avg：`SELECT avg(age) as avgAge FROM user`\n> * sum：`SELECT sum(age) as sumAge FROM user`\n\n```java\n@Test\n    //聚合查询\n    //count、max、min、avg、sum\n    public void testGetAll_eleven(){\n        QueryWrapper<User> lqw = new QueryWrapper<User>();\n//        lqw.select(\"count(*) as count\");\n//        lqw.select(\"max(age) as maxAge\");\n//        lqw.select(\"min(age) as minAge\");\n//        lqw.select(\"sum(age) as sumAge\");\n        lqw.select(\"avg(age) as avgAge\");\n        List<Map<String, Object>> userList = userDao.selectMaps(lqw);\n        System.out.println(userList);\n    }\n```\n\n### 3.2.3 分组查询\n\n* 需求：分组查询，完成`group by`的查询使用。\n* groupBy为分组。\n* 最终的sql语句为：`SELECT count(*) as count,tel FROM user GROUP BY tel`\n\n```java\n@Test\n//分组查询\n//group by\npublic void testGetAll_twelve(){\n    QueryWrapper<User> lqw = new QueryWrapper<User>();\n    lqw.select(\"count(*) as count,tel\");\n    lqw.groupBy(\"tel\");\n    List<Map<String, Object>> userList = userDao.selectMaps(lqw);\n    System.out.println(userList);\n}\n```\n\n> * 注意：\n> * 聚合与分组查询，无法使用lambda表达式来完成。\n> * MP只是对MyBatis的增强，如果MP实现不了，我们可以直接在DAO接口中使用MyBatis的方式实现。\n\n## 3.3 查询条件设定\n\n* MP的查询条件有很多：\n  * 范围匹配（> 、 = 、between） \n  * 模糊匹配（like） \n  * 空判定（null） \n  * 包含性匹配（in） \n  * 分组（group） \n  * 排序（order）\n\n### 3.3.1 等值查询\n\n* 需求：根据用户名和密码查询用户信息。\n* eq()\n* `SELECT id,name,password,age,tel FROM user WHERE (name = ? AND password = ?)`\n* selectList：查询结果为多个或者单个。\n* selectOne：查询结果为单个。\n\n```java\n@Test\n//查询条件\n//等值查询\n//需求:根据用户名和密码查询用户信息\n//eq()\npublic void testGetAll_thirteen(){\n    LambdaQueryWrapper<User> lqw = new LambdaQueryWrapper<User>();\n    lqw.eq(User::getName,\"cds\").eq(User::getPassword,\"4123\");\n    User loginUser = userDao.selectOne(lqw);\n    System.out.println(loginUser);\n}\n```\n\n### 3.3.2 范围查询\n\n* 需求：对年龄进行范围查询，使用`lt()、le()、gt()、ge()、between()`进行范围查询\n* gt()：大于(>) \n* ge()：大于等于(>=) \n* lt()：小于(<) \n* lte()：小于等于(<=) \n* between()：`between ? and ?`\n\n```java\n@Test\n//查询条件\n//范围查询\n//需求:对年龄进行范围查询，使用lt()、le()、gt()、ge()、between()进行范围查询\n//between():between ? and ?\npublic void testGetAll_fourteen(){\n    LambdaQueryWrapper<User> lqw = new LambdaQueryWrapper<User>();\n    lqw.between(User::getAge,10,50);\n    List<User> userList = userDao.selectList(lqw);\n    System.out.println(userList);\n}\n```\n\n### 3.3.3 模糊查询\n\n* 需求：查询表中name属性的值以J开头的用户信息,使用`like`进行模糊查询\n* like()：前后加百分号，如 `%A%` 。\n* likeLeft()：前面加百分号，如 `%J` 。\n* likeRight()：后面加百分号，如 `J%`。\n\n```java\n@Test\n    //查询条件\n    //模糊查询\n    //需求:查询表中name属性的值以J开头的用户信息,使用like进行模糊查询\n//    like():前后加百分号,如 %J%\n//    likeLeft():前面加百分号,如 %J\n//    likeRight():后面加百分号,如 J%\n    public void testGetAll_fifteen(){\n        LambdaQueryWrapper<User> lqw = new LambdaQueryWrapper<User>();\n        lqw.like(User::getName,\"4\");\n        List<User> userList = userDao.selectList(lqw);\n        System.out.println(userList);\n    }\n```\n\n### 3.3.4 排序查询\n\n* ![image-20220908204504153](http://qny.expressisland.cn/schoolOpens/image-20220908204504153.png)\n\n\n\n## 3.4 字段映射与表名映射（映射匹配兼容性）\n\n### 3.4.1 问题\n\n* 表字段与编码属性设计不同步？\n* 编码中添加了数据库中未定义的属性？\n* 采用默认查询开放了更多的字段查看权限？\n* 表名与编码开发设计不同步？\n\n### 3.4.2 实例\n\n#### （1）修改数据库表user为tbl_user\n\n* ![image-20220908205707653](http://qny.expressisland.cn/schoolOpens/image-20220908205707653.png)\n\n##### 解决方案 —— 模型类添加`@TableName`注解\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n//@TableName注解\n@TableName(\"tbl_user\")\npublic class User {\n    private Long id;\n    private String name;\n    private String password;\n    private Integer age;\n    private String tel;\n\n    public User(String name, String password) {\n        this.name = name;\n        this.password = password;\n    }\n    //@Data是个组合注解，包含上面的注解的功能\n    //@NoArgsConstructor:提供一个无参构造函数\n    //@AllArgsConstructor:提供一个包含所有参数的构造函数\n}\n```\n\n#### （2）将字段password修改成pwd\n\n* ![image-20220908205903043](http://qny.expressisland.cn/schoolOpens/image-20220908205903043.png)\n\n##### 解决方案 —— 使用@TableField映射关系\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName(\"tbl_user\")\npublic class User {\n    private Long id;\n    private String name;\n    \n    \n    //@TableField映射关系\n    @TableField(value=\"pwd\")\n    private String password;\n    private Integer age;\n    private String tel;\n\n    public User(String name, String password) {\n        this.name = name;\n        this.password = password;\n    }\n}\n```\n\n#### （3）添加一个数据库表不存在的字段\n\n* ![image-20220908210137305](http://qny.expressisland.cn/schoolOpens/image-20220908210137305.png)\n\n##### 解决方案 —— 使用@TableField排除字段\n\n```java\n@Data\n@TableName(\"tbl_user\")\npublic class User {\n    private Long id;\n    private String name;\n    @TableField(value=\"pwd\")\n    private String password;\n    private Integer age;\n    private String tel;\n    \n    //使用@TableField排除字段\n    @TableField(exist=false)\n    \n    //添加一个数据库表不存在的字段\n    private Integer online;\n}\n```\n\n#### （4）查询时将pwd隐藏\n\n```java\n@Data\n@TableName(\"tbl_user\")\npublic class User {\n    private Long id;\n    private String name;\n    \n    //查询时将pwd隐藏\n    //password=null\n    @TableField(value=\"pwd\",select=false)\n    \n    private String password;\n    private Integer age;\n    private String tel;\n    @TableField(exist=false)\n    private Integer online;\n}\n```\n\n### 3.4.3 知识点 —— `@TableField`、`@TableName`\n\n#### @TableField\n\n* ![image-20220908210513897](http://qny.expressisland.cn/schoolOpens/image-20220908210513897.png)\n\n#### @TableName\n\n* ![image-20220908210536418](http://qny.expressisland.cn/schoolOpens/image-20220908210536418.png)\n\n\n\n# 四、DML控制\n\n## 4.1 id生成策略控制（Insert）\n\n### 4.1.1 知识点：@TableId\n\n* ![image-20220908223829523](http://qny.expressisland.cn/schoolOpens/image-20220908223829523.png)\n\n### 4.1.2 初始测试环境\n\n```java\n@SpringBootTest\nclass Mybatisplus03DqlApplicationTests {\n		\n    @Autowired\n	private UserDao userDao;\n\n\n	@Test\n    void testSave(){\n        User user = new User();\n        user.setName(\"11L\");\n        user.setPassword(\"1111\");\n        user.setAge(10);\n        user.setTel(\"11110\");\n        userDao.insert(user);\n    }\n\n    @Test\n    void testDelete(){\n        userDao.deleteById(8888);\n    }\n\n    @Test\n    void testUpdate(){\n        User user = new User();\n        user.setId(3L);\n        user.setName(\"safety\");\n        user.setPassword(\"468\");\n        user.setAge(17);\n        user.setTel(\"189\");\n        userDao.updateById(user);\n    }\n}\n```\n\n### 4.1.3 AUTO策略\n\n#### （1）设置生成策略为AUTO\n\n* AUTO的作用是使用数据库ID自增。\n* 在使用该策略的时候一定要确保对应的数据库表设置了ID主键自增，否则无效。\n\n```java\n@Data\n@TableName(\"tbl_user\")\npublic class User {\n    \n    //设置生成策略为AUTO\n    @TableId(type = IdType.AUTO)\n    \n    private Long id;\n    private String name;\n    @TableField(value=\"pwd\",select=false)\n    private String password;\n    private Integer age;\n    private String tel;\n    @TableField(exist=false)\n    private Integer online;\n}\n```\n\n#### （2）其他生成策略\n\n* `NONE`：不设置id生成策略\n* `INPUT`：用户手工输入id\n\n* `ASSIGN_ID`：雪花算法生成id（可兼容数值型与字符串型）。\n* `ASSIGN_UUID`：以UUID生成算法作为id生成策略。\n\n#### （3）分布式ID\n\n* 当数据量足够大的时候，一台数据库服务器存储不下，这个时候就需要多台数据库服务器进行存储。\n* 比如订单表就有可能被存储在不同的服务器上，如果用数据库表的自增主键，因为在两台服务器上所以会出现冲突。\n* 这个时候就需要一个全局唯一ID，这个ID就是分布式ID。\n\n### 4.1.4 INPUT策略\n\n#### （1）设置生成策略为INPUT\n\n* 注意：这种ID生成策略，需要将表的自增策略删除掉。\n* ![image-20220908224002438](http://qny.expressisland.cn/schoolOpens/image-20220908224002438.png)\n\n```java\n@Data\n@TableName(\"tbl_user\")\npublic class User {\n    \n    //设置生成策略为INPUT\n    @TableId(type = IdType.INPUT)\n    \n    private Long id;\n    private String name;\n    @TableField(value=\"pwd\",select=false)\n    private String password;\n    private Integer age;\n    private String tel;\n    @TableField(exist=false)\n    private Integer online;\n}\n```\n\n#### （2）添加数据手动设置ID\n\n```java\n@Test\n    void testSave(){\n        User user = new User();\n        \n        //添加数据手动设置ID\n        //设置主键ID的值\n        user.setId(9L);\n        \n        user.setName(\"11L\");\n        user.setPassword(\"1111\");\n        user.setAge(10);\n        user.setTel(\"11110\");\n        userDao.insert(user);\n    }\n```\n\n### 4.1.5 ASSIGN_ID策略\n\n#### （1）设置生成策略为ASSIGN_ID\n\n```java\n@Data\n@TableName(\"tbl_user\")\npublic class User {\n    \n    //设置生成策略为ASSIGN_ID\n    @TableId(type = IdType.ASSIGN_ID)\n    \n    private Long id;\n    private String name;\n    @TableField(value=\"pwd\",select=false)\n    private String password;\n    private Integer age;\n    private String tel;\n    @TableField(exist=false)\n    private Integer online;\n}\n```\n\n#### （2）添加数据不设置ID\n\n* 注意：这种生成策略，不需要手动设置ID，如果手动设置ID，则会使用自己设置的值。\n* 生成的ID就是一个Long类型的数据。\n\n```java\n@Test\nvoid testSave(){\n    User user = new User();\n    user.setName(\"13L\");\n    user.setPassword(\"1111\");\n    user.setAge(10);\n    user.setTel(\"11110\");\n    userDao.insert(user);\n}\n```\n\n### 4.1.6 ASSIGN_UUID策略\n\n#### （1）设置生成策略为ASSIGN_UUID\n\n* 使用uuid需要注意的是，主键的类型不能是Long，而应该改成String类型。\n\n```java\n@Data\n@TableName(\"tbl_user\")\npublic class User {\n\n    //设置生成策略为ASSIGN_UUID\n    @TableId(type = IdType.ASSIGN_UUID)\n\n    private Long id;\n    private String name;\n    @TableField(value=\"pwd\",select=false)\n    private String password;\n    private Integer age;\n    private String tel;\n    @TableField(exist=false)\n    private Integer online;\n}\n```\n\n#### （2）修改表的主键类型\n\n* ![image-20220908224527516](http://qny.expressisland.cn/schoolOpens/image-20220908224527516.png)\n\n#### （3）添加数据不设置ID\n\n```java\n@Test\nvoid testSave(){\n    User user = new User();\n    user.setName(\"13L\");\n    user.setPassword(\"1111\");\n    user.setAge(10);\n    user.setTel(\"11110\");\n    userDao.insert(user);\n}\n```\n\n### 4.1.7 雪花算法\n\n* ![image-20220908225125448](http://qny.expressisland.cn/schoolOpens/image-20220908225125448.png)\n\n### 4.1.8 ID生成策略对比\n\n* `NONE`：不设置id生成策略，MP不自动生成，约等于INPUT。\n  * 所以这两种方式都需要用户手动设置，但是手动设置第一个问题是容易出现相同的ID造成主键冲突。\n  * 为了保证主键不冲突就需要做很多判定，实现起来比较复杂。\n* `AUTO`：数据库ID自增，这种策略适合在数据库服务器只有1台的情况下使用，不可作为分布式ID使用。\n* `ASSIGN_UUID`：可以在分布式的情况下使用，而且能够保证唯一，但是生成的主键是32位的字符串，长度过长占用空间而且还不能排序，查询性能也慢。\n* `ASSIGN_ID`：可以在分布式的情况下使用，生成的是Long类型的数字，可以排序性能也高，但是生成的策略和服务器时间有关，如果修改了系统时间就有可能导致出现重复主键。\n\n### 4.1.9 简化配置\n\n* 如何在项目中的每一个模型类上都使用相同的生成策略？\n\n#### 解决方案\n\n* 在`application.yml`中配置`id-type: assign_id`\n\n* 每个模型类的主键ID策略都将成为`assign_id`\n\n```yaml\n# assign_id\n# 每个模型类的主键ID策略都将成为assign_id\nmybatis-plus:\n  global-config:\n    db-config:\n      id-type: assign_id\n```\n\n### 4.1.10 数据库表与模型类的映射关系 \n\n* MP会默认将模型类的类名名首字母小写作为表名使用，假如数据库表的名称都以tbl_开头，那么我们就需要将所有的模型类上添加`@TableName`。\n* 麻烦。\n* 那么该如何简化呢？\n* 在`application.yml`中配置`table-prefix: tbl_`\n* 设置表的前缀内容，这样MP就会拿`tbl_`加上模型类的首字母小写，就刚好组装成数据库的表名。\n\n```yaml\n# assign_id\n# 每个模型类的主键ID策略都将成为assign_id\nmybatis-plus:\n  global-config:\n    db-config:\n      id-type: assign_id\n      \n      # 在application.yml中配置id-type: assign_id\n      table-prefix: tbl_\n```\n\n## 4.2 多记录操作（删除-查询）（Delete-Selete）\n\n### 4.2.1 删除指定多条数据\n\n#### （1）对应的API方法\n\n* 删除（根据ID 批量删除）,参数是一个集合，可以存放多个id值。\n\n```java\nint deleteBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);\n```\n\n#### （2）需求：根据传入的id集合将数据库表中的数据删除掉\n\n* 执行成功后，数据库表中的数据就会按照指定的id进行删除。\n\n```java\n    @Test\n    void testDelete(){\n        //删除指定多条数据\n        List<Long> list = new ArrayList<>();\n        list.add(1567880975352897538L);\n        list.add(9l);\n        list.add(8L);\n        userDao.deleteBatchIds(list);\n    }\n```\n\n### 4.2.2 查询指定多条数据\n\n#### （1）对应的API方法\n\n* 查询（根据ID 批量查询），参数是一个集合，可以存放多个id值。\n\n```java\nList<T> selectBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);\n```\n\n#### （2）需求：根据传入的ID集合查询用户信息\n\n```java\n@Test\nvoid testGetByIds(){\n    //查询指定多条数据\n    List<Long> list = new ArrayList<>();\n    list.add(1L);\n    list.add(2l);\n    list.add(3L);\n    userDao.selectBatchIds(list);\n}\n```\n\n## 4.3 逻辑删除（Delete/Update）\n\n* 物理删除：业务数据从数据库中丢弃，执行的是delete操作。\n* 逻辑删除：为数据设置是否可用状态字段，删除时设置状态字段为不可用状态，数据保留在数据库中，执行的是update操作。\n\n### 4.3.1 MP中逻辑删除具体实现\n\n#### （1）修改数据库表添加deleted列\n\n* 字段名可以任意，内容也可以自定义，比如0代表正常，1代表删除，可以在添加列的同时设置其默认值为0正常。\n\n![image-20220909194002883](http://qny.expressisland.cn/schoolOpens/image-20220909194002883.png)\n\n#### （2）实体类添加属性\n\n* 添加与数据库表的列对应的一个属性名，名称可以任意，如果和数据表列名对不上，可以使用`@TableField`进行关系映射，如果一致，则会自动对应。 \n* 标识新增的字段为逻辑删除字段，使用`@TableLogic`。\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n    @TableId(type = IdType.ASSIGN_UUID)\n    private Long id;\n    private String name;\n    private String password;\n    private Integer age;\n    private String tel;\n\n    //@TableLogic\n    @TableLogic(value = \"0\",delval = \"1\")\n    //value为正常数据的值，delval为删除数据的值\n    private Integer deleted;\n\n    public User(String name, String password) {\n        this.name = name;\n        this.password = password;\n    }\n\n}\n```\n\n#### （3）运行删除方法\n\n* 逻辑删除最后走的是`update`操作，会将指定的字段修改成删除状态对应的值。\n\n```java\n@Test\nvoid testDelete2(){\n    userDao.deleteById(7L);\n}\n```\n\n#### （4）逻辑删除，对查询的影响？\n\n* 执行查询操作\n\n```java\n@Test\nvoid testFind(){\n    System.out.println(userDao.selectList(null));\n}\n```\n\n* 打印出来的sql语句中会多一个查询条件。\n* `SELECT id,name,password,age,tel,deleted FROM user WHERE deleted=0`\n* **WHERE deleted=0**\n\n* MP的逻辑删除会将所有的查询都添加一个未被删除的条件，也就是已经被删除的数据是 不应该被查询出来的。\n* ![image-20220909194430604](http://qny.expressisland.cn/schoolOpens/image-20220909194430604.png)\n\n#### （5）已经删除的数据都查询出来该如何实现（UserDao）\n\n```java\n@Mapper\npublic interface UserDao extends BaseMapper<User> {\n    //查询所有数据包含已经被删除的数据\n    @Select(\"select * from user\")\n    public List<User> selectAll();\n}\n```\n\n#### （6）全局配置\n\n* 如果每个表都要有逻辑删除，那么就需要在每个模型类的属性上添加`@TableLogic`注解\n* 麻烦\n* 在配置文件中添加全局配置：\n\n```yaml\nglobal-config:\n  db-config:\n  	# 逻辑删除字段名\n    logic-delete-field: deleted\n    # 逻辑删除字面值：未删除为0\n    logic-delete-value: 0\n    # 逻辑删除字面值：删除为1\n    logic-not-delete-value: 1\n```\n\n### 4.3.2 逻辑删除的本质\n\n* 逻辑删除的本质其实是修改操作。\n* 如果加了逻辑删除字段，查询数据时也会自动带上逻辑删除字段。\n* 实际的 SQL语句：`UPDATE user SET deleted=1 where id = ? AND deleted=0`\n\n### 4.3.3 知识点：`@TableLogic`\n\n* ![image-20220909194954939](http://qny.expressisland.cn/schoolOpens/image-20220909194954939.png)\n\n## 4.4 乐观锁（Update）\n\n* 业务并发现象带来的问题：`秒杀`。\n* **乐观锁主要解决的问题是当要更新一条记录的时候，希望这条记录没有被别人更新。**\n* ![image-20220909222615856](http://qny.expressisland.cn/schoolOpens/image-20220909222615856.png)\n\n### 4.4.0 乐观锁插件\n\n* 想不明白了去这里。\n\n* 乐观锁插件官方文档：https://baomidou.com/pages/0d93c0/#optimisticlockerinnerinterceptor\n\n### 4.4.1 实现思路（乐观锁的实现方式）\n\n* ![image-20220909222703633](http://qny.expressisland.cn/schoolOpens/image-20220909222703633.png)\n\n### 4.4.2  实现步骤\n\n#### （1）数据库表添加列\n\n* 列名可以任意，比如使用`version`，给列设置默认值为1。\n* ![image-20220909222819704](http://qny.expressisland.cn/schoolOpens/image-20220909222819704.png)\n\n#### （2）在模型类中添加对应的属性\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n    @TableId(type = IdType.ASSIGN_UUID)\n    private Long id;\n    private String name;\n    private String password;\n    private Integer age;\n    private String tel;\n\n    @TableLogic(value = \"0\",delval = \"1\")\n    //value为正常数据的值，delval为删除数据的值\n    private Integer deleted;\n\n    //在模型类中添加对应的属性\n    @Version\n    private Integer version;\n\n    public User(String name, String password) {\n        this.name = name;\n        this.password = password;\n    }\n\n}\n```\n\n#### （3）添加乐观锁的拦截器\n\n* `@Configuration`一定要注意！\n\n```java\n@Configuration\npublic class MpConfig {\n    @Bean\n    public MybatisPlusInterceptor mpInterceptor() {\n        //1.定义Mp拦截器\n        MybatisPlusInterceptor mpInterceptor = new MybatisPlusInterceptor();\n        //2.添加乐观锁拦截器\n        mpInterceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor());\n        return mpInterceptor;\n    }\n}\n```\n\n#### （4）执行更新操作-添加version数据\n\n* 传递的是1，MP会将1进行加1，然后，更新回到数据库表中。\n\n```java\n@Test\nvoid testUpdate1(){\n    User user = new User();\n    user.setId(3L);\n    user.setName(\"Jock666\");\n    //添加version数据\n    user.setVersion(1);\n    userDao.updateById(user);\n}\n```\n\n* 实现乐观锁，首先第一步应该是拿到表中的version；\n* 然后拿version当条件在将version加1更新回到数据库表中；\n* 所以我们在查询的时候，需要对其进行查询。\n\n```java\n@Test\nvoid testUpdate3(){\n    //1.先通过要修改的数据id将当前数据查询出来\n    User user = userDao.selectById(3L);\n    //2.将要修改的属性逐一设置进去\n    user.setName(\"Jock888\");\n    userDao.updateById(user);\n}\n```\n\n#### （5）模拟加锁情况\n\n* 实现多个人修改同一个数据的时候，只能有一个人修改成功。\n\n```java\n@Test\nvoid testUpdate4(){\n    //1.先通过要修改的数据id将当前数据查询出来\n    User user = userDao.selectById(3L); //version=3\n    User user2 = userDao.selectById(3L); //version=3\n    user2.setName(\"Jock aaa\");\n    userDao.updateById(user2); //version=>4\n    user.setName(\"Jock bbb\");\n    userDao.updateById(user); //version=3?条件还成立吗？不成立\n}\n```\n\n* 结果：\n  * ![image-20220909225401550](http://qny.expressisland.cn/schoolOpens/image-20220909225401550.png)\n\n# 五、快速开发（代码生成器）\n\n* https://baomidou.com/pages/779a6e/#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\n* 看文档吧，了解下。', 28, '是', '2022-11-03 07:29:24', 'http://qny.expressisland.cn/schoolOpens/image-20221025100746476.png', '1', '1');
INSERT INTO `t_blog` VALUES ('244406ccbab24a768f23a12ff03357a9', '蓝桥云杯 - 卡片 - 2021', '蓝桥云杯 - 卡片 - 2021', '蓝桥云杯 - 卡片- 省赛 - 2021\n<!--more-->\n\n# 卡片- 省赛 - 2021\n* Python3\n* 小蓝有很多数字卡片，每张卡片上都是数字 00 到 99。 小蓝准备用这些卡片来拼一些数，他想从 11 开始拼出正整数，每拼一个， 就保存起来，卡片就不能用来拼其它数了。 小蓝想知道自己能从 11 拼到多少。 例如，当小蓝有 3030 张卡片，其中 00 到 99 各 33 张，则小蓝可以拼出 11 到 1010， 但是拼 1111 时卡片 11 已经只有一张了，不够拼出 1111。 现在小蓝手里有 00 到 99 的卡片各 20212021 张，共 2021020210 张，请问小蓝可以从 11 拼到多少？ 提示：建议使用计算机编程解决问题。\n\n\n    import os\n    import sys\n    \n    # 请在此输入您的代码\n    count = 0\n    i=1\n    while True:\n      count +=str(i).count(\'1\')\n      if count == 2021:\n        print(i)\n        break\n      i += 1\n\n* ![image-20220825011519991](http://qny.expressisland.cn/schoolOpens/image-20220825011519991.png)', 7, '是', '2022-11-03 13:20:18', 'http://qny.expressisland.cn/schoolOpens/image-20221025095359335.png', '1', '8e3607022a3b42499d2e1921e0289132');
INSERT INTO `t_blog` VALUES ('29fefa67ab0547728477e7b0f31488ee', ' 03 - Redis', 'Redis', '# Redis\n<!--more-->\n\n* Redis是一个基于**内存**的key-value结构数据库。\n* 基于内存存储，读写性能高。\n* 适合存储热点数据（热点商品、资讯、新闻）。\n\n# Redis入门\n\n## Redis简介\n\n* Redis是一个开源的内存中的数据结构存储系统，它可以用作：数据库、缓存和消息中间件。\n* Redis是用C语言开发的一个开源的高性能键值对(key-value)数据库，官方提供的数据是可以达到100000+的QPS(每秒内查询次数）。\n* 它存储的value类型比较丰富，也被称为结构化的NoSql数据库。\n* NoSql (Not only SQL)，不仅仅是SQL，泛指**非关系型数据库**。\n* NoSql数据库并不是要取代关系型数据库，而是关系型数据库的补充。\n\n| 关系型数据库（RBDMS） | 非关系型数据库（NoSql） |\n| :-------------------: | :---------------------: |\n|         mysql         |        **Redis**        |\n|        Oracle         |        Mongo db         |\n|          DB2          |        MemCached        |\n|       SQLServer       |                         |\n\n### Redis应用场景\n\n* 缓存\n* 任务队列\n* 消息队列\n* 分布式锁\n\n## Redis下载与安装\n\n### Redis安装包分为windows版和Linux版：\n\n* Windows版下载地址: https://github.com/microsoftarchive/redis/releases\n* Linux版下载地址: https://download.redis.io/releases/\n\n### 在Linux系统安装Redis步骤\n\n* 将Redis安装包上传到Linux\n* 解压安装包，命令: tar -zxvf redis-4.0.0.tar.gz -C /usr/local\n* 安装Redis的依赖环境gcc，命令: yum install gcc-c++\n* 进入/usr/local/redis-4.0.0，进行编译，命令: make\n* 进入redis的src目录，进行安装，命令: make install\n\n#### 解压安装包\n\n* `tar -zxvf redis-4.0.0.tar.gz -C /usr/local`\n\n![image-20221024161428800](http://qny.expressisland.cn/schoolOpens/image-20221024161428800.png)\n\n#### 安装Redis的依赖环境gcc\n\n* `yum install gcc-c++`\n\n#### 进入/usr/local/redis-4.0.0，进行编译\n\n* `make`\n\n#### 进入redis的src目录，进行安装\n\n* `make install`\n* ![image-20221024161927192](http://qny.expressisland.cn/schoolOpens/image-20221024161927192.png)\n\n### 在Windows系统安装Redis\n\n* Redis的Windows版属于绿色软件，直接解压即可使用，解压后目录结构如下：\n* ![image-20221024162134180](http://qny.expressisland.cn/schoolOpens/image-20221024162134180.png)\n\n## Redis服务启动与停止\n\n### Linux中redis服务启动\n\n* Linux中redis服务启动，可以使用redis-server，默认端口号（port）为6379。\n* 在Redis的src目录下输入`./redis-server`\n* ![image-20221024162450453](http://qny.expressisland.cn/schoolOpens/image-20221024162450453.png)\n\n#### 复制标签，连接Redis服务\n\n* `cd /usr/local/redis-4.0.0/src`\n* `./redis-cli`\n* ![image-20221024162748669](http://qny.expressisland.cn/schoolOpens/image-20221024162748669.png)\n\n#### Ctrl+C停止Redis服务\n\n#### 修改Redis配置文件，后台运行\n\n* 在Redis目录下，输入`vim redis.conf`\n* daemonize no修改为daemonize yes\n* 在Redis目录下，输入`src/redis-server ./redis.conf`\n  * ![image-20221024163928924](http://qny.expressisland.cn/schoolOpens/image-20221024163928924.png)\n\n### Windows中redis服务启动\n\n* Windows系统中启动Redis，直接双击redis-server.exe即可启动Redis服务。\n* redis服务默认端口号为6379\n* Ctrl+C停止Redis服务\n  * ![image-20221024164019645](http://qny.expressisland.cn/schoolOpens/image-20221024164019645.png)\n* 客户端redis-cli.exe \n  * ![image-20221024164100710](http://qny.expressisland.cn/schoolOpens/image-20221024164100710.png)\n\n### linux的Redis设置密码（可选）\n\n* 在Redis目录下的redis.conf设置\n* 搜索requirepass，取消注释，并修改为`requirepass 123456`\n\n#### 登录Redis的error问题\n\n* 输入`auth 123456`，即认证通过。\n* 或者在Redis根目录中直接输入`src/redis-cli -h localhost -p 6379 -a 123456`\n\n#### 远程连接\n\n* 修改 redis.conf —— `vim redis.conf`\n* 搜索bind，注释`bind 127.0.0.1`\n* ![image-20221024165500684](http://qny.expressisland.cn/schoolOpens/image-20221024165500684.png)\n\n#### 重启Redis\n\n* ![image-20221024165643109](http://qny.expressisland.cn/schoolOpens/image-20221024165643109.png)\n* 在Redis目录下，输入`src/redis-server ./redis.conf`\n* ![image-20221024165719921](http://qny.expressisland.cn/schoolOpens/image-20221024165719921.png)\n\n#### 在windows系统中远程连Redis\n\n* 打开powershell\n* 输入`.\\redis-cli.exe -h 192.168.138.100 -p 6379`\n  * ![image-20221024170324830](http://qny.expressisland.cn/schoolOpens/image-20221024170324830.png)\n* 如果设置了密码，则需要在后面输入 `-a 密码`，如：`.\\redis-cli.exe -h 192.168.138.100 -p 6379 -a 123456`\n\n# 数据类型\n\n## 介绍\n\n* Redis存储的是key-value结构的数据，其中key是字符串类型。\n* value有5种常用的数据类型\n  * 字符串 string\n  * 哈希 hash\n  * 列表 list\n  * 集合 set \n  * 有序集合 sorted set\n\n## Redis 5种常用数据类型\n\n* ![image-20221024170545847](http://qny.expressisland.cn/schoolOpens/image-20221024170545847.png)\n\n# Redis常用命令\n\n## 字符串string操作命令\n\n### 常用命令\n\n* 更多命令可以参考Redis中文网：https://www.redis.net.cn\n\n|        SET key value        |                 设置指定key的值                  |\n| :-------------------------: | :----------------------------------------------: |\n|         **GET** key         |                 获取指定key的值                  |\n| **SETEX** key seconds value | 设置指定key的值，并将key 的过期时间设为seconds秒 |\n|     **SETNX** key value     |          只有在key 不存在时设置key的值           |\n\n### 例1\n\n* | SET key value | 设置指定key的值 |\n  | :-----------: | :-------------: |\n  |  **GET** key  | 获取指定key的值 |\n\n* `set name xiaoming`\n\n* `get name`\n\n* SET key value如果传一样的值则会覆盖原有的值。\n\n* ![image-20221024171916604](http://qny.expressisland.cn/schoolOpens/image-20221024171916604.png)\n\n### 例2\n\n* `SETEX key seconds value`设置指定key的值，并将key 的过期时间设为seconds秒\n* 如：`setex city 10 beijing`，10秒后就没了，显示（nil）。\n\n* ![image-20221024172130444](http://qny.expressisland.cn/schoolOpens/image-20221024172130444.png)\n\n### 例3\n\n* `SETNX key value` ，只有在key 不存在时设置key的值。\n\n* ![image-20221024172339659](http://qny.expressisland.cn/schoolOpens/image-20221024172339659.png)\n\n## 哈希hash操作命令\n\n* Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。\n* ![image-20221024172914434](http://qny.expressisland.cn/schoolOpens/image-20221024172914434.png)\n\n### 常用命令\n\n| HSET key field value | 将哈希表key 中的字段field的值设为value |\n| :------------------: | :------------------------------------: |\n|  **HGET** key field  |     获取存储在哈希表中指定字段的值     |\n|  **HDEL** key field  |      删除存储在哈希表中的指定字段      |\n|    **HKEYS** key     |          获取哈希表中所有字段          |\n|    **HVALS** key     |           获取哈希表中所有值           |\n|   **HGETALL** key    |  获取在哈希表中指定key的所有字段和值   |\n\n#### HSET key field value\n\n* 将哈希表key 中的字段field的值设为value\n\n#### **HGET** key field\n\n* 获取存储在哈希表中指定字段的值\n\n#### **HDEL** key field\n\n* 删除存储在哈希表中的指定字段\n\n### 实例1\n\n* ![image-20221025094816758](http://qny.expressisland.cn/schoolOpens/image-20221025094816758.png)\n\n#### **HKEYS** key\n\n* 获取哈希表中所有字段\n\n#### **HVALS** key\n\n* 获取哈希表中所有值\n\n#### **HGETALL** key\n\n* 获取在哈希表中指定key的所有字段和值\n\n### 实例2\n\n* ![image-20221025095123455](http://qny.expressisland.cn/schoolOpens/image-20221025095123455.png)\n\n## 列表list操作命令\n\n* Redis列表是简单的字符串列表，按照插入顺序排序。\n* ![image-20221025095359335](http://qny.expressisland.cn/schoolOpens/image-20221025095359335.png)\n\n### 常用命令\n\n|   LPUSH key value1 [value2]   |                 将一个或多个值插入到列表头部                 |\n| :---------------------------: | :----------------------------------------------------------: |\n|   **LRANGE** key start stop   |                   获取列表指定范围内的元素                   |\n|         **RPOP** key          |                  移除并获取列表最后一个元素                  |\n|         **LLEN** key          |                         获取列表长度                         |\n| **BRPOP** key1 [key2] timeout | 移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 |\n\n#### LPUSH key value1 [value2]\n\n* 将一个或多个值插入到列表头部\n* 可以有重复值。\n\n#### LRANGE key start stop\n\n* 获取列表指定范围内的元素\n\n#### RPOP key\n\n* 移除并获取列表最后一个元素\n\n### 实例1\n\n* ![image-20221025100143523](http://qny.expressisland.cn/schoolOpens/image-20221025100143523.png)\n\n#### LLEN key\n\n* 获取列表长度\n\n#### BRPOP key1 [key2] timeout\n\n* 移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n\n### 实例2\n\n* 列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n\n* ![image-20221025100500591](http://qny.expressisland.cn/schoolOpens/image-20221025100500591.png)\n* ![image-20221025100551787](http://qny.expressisland.cn/schoolOpens/image-20221025100551787.png)\n\n## 集合set操作命令\n\n* Redis set是string类型的无序集合。\n* 集合成员是唯一的，这就意味着集合中不能出现重复的数据。\n* ![image-20221025100746476](http://qny.expressisland.cn/schoolOpens/image-20221025100746476.png)\n\n### 常用命令\n\n|   SADD key member1 [member2]   | 向集合添加一个或多个成员 |\n| :----------------------------: | :----------------------: |\n|        **SMEMBERS** key        |   返回集合中的所有成员   |\n|         **SCARD** key          |     获取集合的成员数     |\n|     **SINTER** key1 [key2]     |  返回给定所有集合的交集  |\n|     **SUNION** key1 [key2]     |  返回所有给定集合的并集  |\n|     **SDIFF** key1 [key2]      |  返回给定所有集合的差集  |\n| **SREM** key member1 [member2] | 移除集合中一个或多个成员 |\n\n#### SADD key member1 [member2]\n\n* 向集合添加一个或多个成员\n\n#### **SMEMBERS** key\n\n* 返回集合中的所有成员\n\n#### **SCARD** key\n\n* 获取集合的成员数\n\n### 实例1\n\n* ![image-20221025101657116](http://qny.expressisland.cn/schoolOpens/image-20221025101657116.png)\n\n#### **SINTER** key1 [key2]\n\n* 返回给定所有集合的交集\n\n#### **SUNION** key1 [key2]\n\n* 返回所有给定集合的并集\n\n#### **SDIFF** key1 [key2]\n\n* 返回给定所有集合的差集\n\n#### **SREM** key member1 [member2]\n\n* 移除集合中一个或多个成员\n\n### 实例2\n\n* ![image-20221025102142565](http://qny.expressisland.cn/schoolOpens/image-20221025102142565.png)\n\n## 有序集合sorted set操作命令\n\n* Redis sorted set有序集合是string类型元素的集合，且不允许重复的成员。\n* 每个元素都会关联一个double类型的分数（score）。\n* redis正是通过分数来为集合中的成员进行从小到大排序。\n* 有序集合的成员是唯一的，但分数却可以重复。\n* ![image-20221025102326202](http://qny.expressisland.cn/schoolOpens/image-20221025102326202.png)\n\n### 常用命令\n\n| ZADD key score1 member1 [score2 member2] | 向有序集合添加一个或多个成员，或者更新已存在成员的分数 |\n| :--------------------------------------: | :----------------------------------------------------: |\n|  **ZRANGE** key start stop [WITHSCORES]  |       通过索引区间返回有序集合中指定区间内的成员       |\n|     **ZINCRBY** key increment member     |      有序集合中对指定成员的分数加上增量increment       |\n|     **ZREM** key member [member ...]     |             移除有序集合中的一个或多个成员             |\n\n### 实例\n\n* ![image-20221025103524767](http://qny.expressisland.cn/schoolOpens/image-20221025103524767.png)\n\n## 通用命令\n\n|  KEYS pattern  |           查找所有符合给定模式（pattern）的 key            |\n| :------------: | :--------------------------------------------------------: |\n| **EXISTS** key |                    检查给定key是否存在                     |\n|  **TYPE** key  |                  返回key所储存的值的类型                   |\n|  **TTL** key   | 返回给定key的剩余生存时间（TTL, time to live），以秒为单位 |\n|  **DEL** key   |               该命令用于在key存在是删除 key                |\n\n### 实例\n\n* ![image-20221025104452292](http://qny.expressisland.cn/schoolOpens/image-20221025104452292.png)\n\n# 在Java中操作Redis\n\n## 介绍\n\n* Redis 的Java客户端很多，官方推荐的有三种：\n  * Jedis\n  * Lettuce\n  * Redisson\n* Spring对Redis客户端进行了整合，提供了Spring Data Redis，在Spring Boot项目中还提供了对应的Starter，即spring-boot-starter-data-redis。\n\n## Jedis\n\n### Jedis的maven坐标\n\n```xml\n<dependency>\n	<groupld>redis.clients</groupld>\n    <artifactld>jedis<lartifactld>\n    <version>2.8.0</version>\n</dependency>\n```\n\n### 使用Jedis操作Redis的步骤\n\n* ① 获取连接\n* ② 执行操作\n* ③ 关闭连接\n\n### 测试-新建项目\n\n#### pom.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>jedis_demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n        </dependency>\n\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n            <version>2.8.0</version>\n        </dependency>\n\n    </dependencies>\n</project>\n```\n\n#### 测试类JedisTest\n\n* 使用Jedis操作Redis\n\n```java\n/**\n * 使用Jedis操作Redis\n */\npublic class JedisTest {\n\n    @Test\n    public void testRedis(){\n        //1获取连接\n        Jedis jedis = new Jedis(\"localhost\",6379);\n\n        //2执行具体的操作\n        //（插入)\n        jedis.set(\"username\",\"xioliu\");\n\n        //（获取)\n        String value = jedis.get(\"username\");\n        System.out.println(value);\n\n        //（删除)\n//        jedis.del(\"username\");\n\n        //（哈希hash操作）\n        jedis.hset(\"myhash\",\"addr\",\"bj\");\n        String hValue = jedis.hget(\"myhash\",\"addr\");\n        System.out.println(hValue);\n\n        Set<String> keys = jedis.keys(\"*\");\n        for (String key:keys){\n            System.out.println(key);\n        }\n\n        //3关闭连接\n        jedis.close();\n\n    }\n}\n```\n\n##### （插入)\n\n![](http://qny.expressisland.cn/schoolOpens/image-20221025111014301.png)\n\n##### （获取)\n\n![image-20221025111249238](http://qny.expressisland.cn/schoolOpens/image-20221025111249238.png)\n\n##### （删除)\n\n![image-20221025111349994](http://qny.expressisland.cn/schoolOpens/image-20221025111349994.png)\n\n##### （哈希hash操作）\n\n* ![image-20221025111913606](http://qny.expressisland.cn/schoolOpens/image-20221025111913606.png)\n\n* ![image-20221025111944177](http://qny.expressisland.cn/schoolOpens/image-20221025111944177.png)\n\n* ![image-20221025112140366](http://qny.expressisland.cn/schoolOpens/image-20221025112140366.png)\n\n\n\n## Spring Data Redis\n\n* 在Spring Boot项目中，可以使用Spring Data Redis来简化Redis操作。\n\n### Spring Data Redis的maven坐标\n\n```xml\n<dependency>\n  	<groupld>org.springframework.boot</groupld>\n	<artifactld>spring-boot-starter-data-redis</artifactld>\n  </dependency>\n```\n\n### Spring Data Redis\n\n* Spring Data Redis中提供了一个高度封装的类: `RedisTemplate`。\n\n* 针对jedis客户端中大量api进行了归类封装，将同一类型操作封装为operation接口。\n\n* 具体分类如下：\n\n| ValueOperations |      简单K-V操作       |\n| :-------------: | :--------------------: |\n|  SetOperations  |    set类型数据操作     |\n| ZSetOperations  |    zset类型数据操作    |\n| HashOperations  | 针对map类型的数据操作  |\n| ListOperations  | 针对list类型的数据操作 |\n\n### 测试-新建springboot项目\n\n#### pom.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.4.5</version>\n        <relativePath/>\n    </parent>\n    <groupId>com.itheima</groupId>\n    <artifactId>springdataredis_demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <version>2.4.5</version>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\nhttps://www.bilibili.com/video/av213091208/?p=152', 3, '是', '2022-11-03 07:29:10', 'http://qny.expressisland.cn/schoolOpens/image-20221024170545847.png', '1', '8f801f8e82544bd89e69f1875ae45f0b');
INSERT INTO `t_blog` VALUES ('455dde2027ad49ae9a7ab0617673a632', 'Linux', 'Linux - 凡论人心，观事传，不可不...', 'Linux - 凡论人心，观事传，不可不熟，不可不深\n<!--more-->\n\n# Linux\n\n\n\n# 学习目标\n\n* ![image-20221017194007455](http://qny.expressisland.cn/schoolOpens/image-20221017194007455.png)\n\n# Linux简介\n\n## Linux系统版本\n\n* Linux系统分为内核版和发行版：\n  * ![image-20221017194618047](http://qny.expressisland.cn/schoolOpens/image-20221017194618047.png)\n\n### Linux系统版本-发行版\n\n* ubuntu：以桌面应用为主\n* RedHat：应用最广泛、收费\n* centOS：RedHat的社区版、免费\n* openSUSE：对个人完全免费、图形界面华丽\n* Fedora：功能完备、快速更新、免费\n* 红旗Linux：北京中科红旗软件技术有限公司开发\n\n# Linux安装（centOS7）\n\n## 安装方式介绍\n\n* 物理机安装：直接将操作系统安装到服务器硬件上。\n* 虚拟机安装：通过虚拟机软件安装。\n  * **虚拟机**指通过软件模拟的具有完整硬件系统功能、运行在完全隔离环境中的完整计算机系统。\n* **VMware Workstation16 密钥：**ZF3R0-FHED2-M80TY-8QYGC-NPKYF　　\n\n## 安装Linux\n\n### root密码\n\n* root1234\n\n* 这样就是进入系统了\n* ![image-20221017201201821](http://qny.expressisland.cn/schoolOpens/image-20221017201201821.png)\n\n## 网卡设置\n\n* 由于启动服务器时未加载网卡，导致lIP地址初始化失败。\n* `ip addr`\n* ![image-20221017201324121](http://qny.expressisland.cn/schoolOpens/image-20221017201324121.png)\n\n### 修改网络初始化配置，设定网卡在系统启动时初始化\n\n* ![image-20221017201354449](http://qny.expressisland.cn/schoolOpens/image-20221017201354449.png)\n* ![image-20221017201602771](http://qny.expressisland.cn/schoolOpens/image-20221017201602771.png)\n* ![image-20221017201627060](http://qny.expressisland.cn/schoolOpens/image-20221017201627060.png)\n\n### 改最后一项ONBOOT\n\n* ![image-20221017201748007](http://qny.expressisland.cn/schoolOpens/image-20221017201748007.png)\n* `esc`、`:wq`退出\n\n### 测试\n\n* `ip addr`\n* 能看得见IP地址就可以了\n* ![image-20221017202011281](http://qny.expressisland.cn/schoolOpens/image-20221017202011281.png)\n\n## 安装SSH连接工具\n\n* SSH，建立在应用层基础上的安全协议。\n* 常用的SSH连接工具：\n  * putty\n  * secureCRT\n  * xshell\n  * **finalshell**\n* 通过SSH连接工具就可以实现从本地连接到远程的Linux服务器\n\n### **finalshell** SSH连接centos\n\n* ![image-20221017202533488](http://qny.expressisland.cn/schoolOpens/image-20221017202533488.png)\n* ![image-20221017202632536](http://qny.expressisland.cn/schoolOpens/image-20221017202632536.png)\n\n### Linux和Windows目录结构对比\n\n* Linux系统中的目录\n  * `/`是所有目录的顶点。\n  * 目录结构像一颗倒挂的树。\n* ![image-20221017202758585](http://qny.expressisland.cn/schoolOpens/image-20221017202758585.png)\n\n# Linux目录介绍\n\n* `bin` 存放二进制可执行文件\n* `boot` 存放系统引导时使用的各种文件\n* `dev` 存放设备文件etc存放系统配置文件\n* `home` 存放系统用户的文件·\n* `lib` 存放程序运行所需的共享库和内核模块\n* `opt` 额外安装的可选应用程序包所放置的位置\n* `root` 超级用户目录\n* `sbin` 存放二进制可执行文件，只有root用户才能访问\n* `tmp` 存放临时文件\n* `usr` 存放系统应用程序\n* `var` 存放运行时需要改变数据的文件，例如日志文件\n* ![image-20221017203018605](http://qny.expressisland.cn/schoolOpens/image-20221017203018605.png)\n\n# Linux常用命令\n\n## Linux命令初体验\n\n* ![image-20221017203353318](http://qny.expressisland.cn/schoolOpens/image-20221017203353318.png)\n* 注意事项：在执行Linux命令时，提示信息如果显示为乱码，这是由于编码问题导致，只需要修改Linux的编码即可。\n* 命令如下：\n* `echo \'LANG=\"en_US.UTF-8\"\' >> /etc/profile`\n  `source /etc/profile`\n\n### Linux命令初体验\n\n* ![image-20221017204404173](http://qny.expressisland.cn/schoolOpens/image-20221017204404173.png)\n\n### Linux命令使用技巧\n\n* Tab键自动补全\n* 连续两次Tab键，给出操作提示\n* 使用上下箭头快速调出曾经使用过的命令\n* 使用`clear命令`或者`Ctrl+l快捷键`实现清屏\n\n### Linux命令格式\n\n* ![image-20221017212553755](http://qny.expressisland.cn/schoolOpens/image-20221017212553755.png)\n* 例：`ls -l`\n  * ![image-20221017213206851](http://qny.expressisland.cn/schoolOpens/image-20221017213206851.png)\n* 例：`cd /root`、`touch 2.txt 3.txt 4.txt``\n* 例：`rm -f 1.txt`（直接删除，不提示）\n\n## 文件目录操作命令\n\n### `ls`显示指定目录下的内容\n\n* ![image-20221017213609513](http://qny.expressisland.cn/schoolOpens/image-20221017213609513.png)\n* ![image-20221017213935513](http://qny.expressisland.cn/schoolOpens/image-20221017213935513.png)\n* ![image-20221017213954160](http://qny.expressisland.cn/schoolOpens/image-20221017213954160.png)\n\n#### 简写`“ll”=“ls -l”`\n\n* ![image-20221017214045503](http://qny.expressisland.cn/schoolOpens/image-20221017214045503.png)\n\n### `cd`切换当前工作目录，即进入指定目录\n\n* ![image-20221017214145046](http://qny.expressisland.cn/schoolOpens/image-20221017214145046.png)\n\n### `cat`显示文件内容\n\n* ![image-20221017214342761](http://qny.expressisland.cn/schoolOpens/image-20221017214342761.png)\n\n#### 例1：`cat /etc/profile`\n\n* ![image-20221017214538733](http://qny.expressisland.cn/schoolOpens/image-20221017214538733.png)\n\n#### 例2：`cat -n /etc/profile`\n\n* ![image-20221017214833600](http://qny.expressisland.cn/schoolOpens/image-20221017214833600.png)\n\n### `more`以分页的形式显示文件内容\n\n* ![image-20221017215012114](http://qny.expressisland.cn/schoolOpens/image-20221017215012114.png)\n\n#### 例：`more /etc/profile`\n\n![image-20221017215450634](http://qny.expressisland.cn/schoolOpens/image-20221017215450634.png)\n\n### `tail`查看文件末尾的内容\n\n* ![image-20221017215552237](http://qny.expressisland.cn/schoolOpens/image-20221017215552237.png)\n\n#### 例：`tail -f /my/my.log`\n\n* ![image-20221017220031386](http://qny.expressisland.cn/schoolOpens/image-20221017220031386.png)\n\n* ![image-20221017220012326](http://qny.expressisland.cn/schoolOpens/image-20221017220012326.png)\n* 按`ctrl + c` 即可退出。\n\n### `mkdir`创建目录\n\n* ![image-20221017220136412](http://qny.expressisland.cn/schoolOpens/image-20221017220136412.png)\n\n#### 举例\n\n* ![image-20221017220548880](http://qny.expressisland.cn/schoolOpens/image-20221017220548880.png)\n\n### `rmdir`删除空目录\n\n* ![image-20221017220644699](http://qny.expressisland.cn/schoolOpens/image-20221017220644699.png)\n\n#### 举例\n\n* ![image-20221017220959990](http://qny.expressisland.cn/schoolOpens/image-20221017220959990.png)\n\n### `rm`删除文件或者目录\n\n* ![image-20221017221043509](http://qny.expressisland.cn/schoolOpens/image-20221017221043509.png)\n\n#### 举例\n\n* ![image-20221017221619617](http://qny.expressisland.cn/schoolOpens/image-20221017221619617.png)\n\n## 拷贝移动命令\n\n### `CP`用于复制文件或目录\n\n* ![image-20221017221832541](http://qny.expressisland.cn/schoolOpens/image-20221017221832541.png)\n\n#### 举例① —— 将cpdd01.txt复制到cpdd目录中\n\n* ![image-20221018200707504](http://qny.expressisland.cn/schoolOpens/image-20221018200707504.png)\n\n#### 举例② —— 将cpdd01.txt复制到当前目录，并改名为cpdd02.txt\n\n* ![image-20221018202703907](http://qny.expressisland.cn/schoolOpens/image-20221018202703907.png)\n\n#### 举例③ —— 将cpdd目录和目录下所有文件复制到ps目录下\n\n* ![image-20221018203045806](http://qny.expressisland.cn/schoolOpens/image-20221018203045806.png)\n\n#### 举例④ —— 将hei目录下所有文件复制到ps目录下\n\n* ![image-20221018203654613](http://qny.expressisland.cn/schoolOpens/image-20221018203654613.png)\n\n### `mv`为文件或目录改名、或将文件或目录移动到其它位置\n\n* ![image-20221018204001674](http://qny.expressisland.cn/schoolOpens/image-20221018204001674.png)\n\n#### ① 将tiktok.txt改名为dou.txt\n\n* ![image-20221018204307272](http://qny.expressisland.cn/schoolOpens/image-20221018204307272.png)\n\n#### ② 将文件dou.txt移动到ps目录中\n\n* ![image-20221018204429964](http://qny.expressisland.cn/schoolOpens/image-20221018204429964.png)\n\n#### ③ 将dou.txt移动到cp9目录中，并改名为yin.txt\n\n* ![image-20221018204742133](http://qny.expressisland.cn/schoolOpens/image-20221018204742133.png)\n\n#### ④ 如果mv1目录不存在，将mv1目录改名为mv2；如果mv1目录存在，将mv1目录移动到mv2目录中\n\n* ![image-20221018205257394](http://qny.expressisland.cn/schoolOpens/image-20221018205257394.png)\n\n## 打包压缩命令\n\n### `tar`对文件进行打包、解包、压缩、解压\n\n* ![image-20221018205931298](http://qny.expressisland.cn/schoolOpens/image-20221018205931298.png)\n\n#### ① 建包 `-cvf`\n\n* ![image-20221018210432484](http://qny.expressisland.cn/schoolOpens/image-20221018210432484.png)、\n\n#### ② 打包压缩 `-zvcf`\n\n* ![image-20221018225049391](http://qny.expressisland.cn/schoolOpens/image-20221018225049391.png)\n\n#### ③ 解包 `-xvf`\n\n* ![](http://qny.expressisland.cn/schoolOpens/image-20221018225350167.png)\n\n#### ④ 解压 `-zxvf`\n\n* ![image-20221018225624433](http://qny.expressisland.cn/schoolOpens/image-20221018225624433.png)\n\n### 举例（打包、解包）\n\n* ![image-20221018225830313](http://qny.expressisland.cn/schoolOpens/image-20221018225830313.png)\n\n#### 解包 - 解压到根目录\n\n* ![image-20221018230105322](http://qny.expressisland.cn/schoolOpens/image-20221018230105322.png)\n* ![image-20221018230132521](http://qny.expressisland.cn/schoolOpens/image-20221018230132521.png)\n\n## 文本编辑命令\n\n### `vi/vim`\n\n* ![image-20221018230247912](http://qny.expressisland.cn/schoolOpens/image-20221018230247912.png)\n\n#### 安装vim\n\n* `yum install vim`\n* ![image-20221020190230389](http://qny.expressisland.cn/schoolOpens/image-20221020190230389.png)\n* ![image-20221020190211699](http://qny.expressisland.cn/schoolOpens/image-20221020190211699.png)\n\n### vim\n\n* ![image-20221020190108957](http://qny.expressisland.cn/schoolOpens/image-20221020190108957.png)\n\n#### 针对vim中的三种模式说明如下：\n\n##### 1、命令模式\n\n* 命令模式下可以查看文件内容、移动光标（上下左右箭头、gg、G）。\n* 通过vim命令打开文件后，默认进入命令模式。\n* 另外两种模式需要首先进入命令模式，才能进入彼此。\n\n##### 2、插入模式\n\n* 插入模式下可以对文件内容进行编辑。\n* 在命令模式下按下[**i,a,o**]任意一个，可以进入插入模式。\n* 进入插入模式后，下方会出现【insert】字样。\n* 在插入模式下按下**ESC**键，回到命令模式。\n\n##### 3、底行模式\n\n* 底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作。\n* 在命令模式下按下[**:,/**]任意一个，可以进入底行模式。\n* 通过**/**方式进入底行模式后，可以对文件内容进行查找。\n* 通过**:**方式进入底行模式后，可以输入**wq**(保存并退出)、**q!**(不保存退出)、**set nu**(显示行号)。\n\n## 查找命令\n\n### `find`在指定目录下查找文件\n\n* ![image-20221020191605725](http://qny.expressisland.cn/schoolOpens/image-20221020191605725.png)\n\n#### 在当前目录及其子目录下查找.java结尾文件\n\n* ![image-20221020191738475](http://qny.expressisland.cn/schoolOpens/image-20221020191738475.png)\n\n#### 在/root目录及其子目录下查找.java结尾的文件\n\n* ![image-20221020192127520](http://qny.expressisland.cn/schoolOpens/image-20221020192127520.png)\n\n### `grep`从指定文件中查找指定的文本内容\n\n* ![image-20221020192223065](http://qny.expressisland.cn/schoolOpens/image-20221020192223065.png)\n\n#### 查找Hello.java文件中出现的Hello字符串的位置\n\n* ![image-20221020192523794](http://qny.expressisland.cn/schoolOpens/image-20221020192523794.png)\n\n#### 查找当前目录中所有.java结尾的文件中包含hello字符串的位置\n\n* ![image-20221020192553132](http://qny.expressisland.cn/schoolOpens/image-20221020192553132.png)\n\n\n\n# Linux软件安装\n\n## 软件安装方式\n\n### 二进制发布包安装\n\n* 软件已经针对具体平台编译打包发布，只要解压，修改配置即可。\n\n### rpm安装\n\n* 软件已经按照redhat的包管理规范进行打包，使用rpm命令进行安装，不能自行解决库依赖问题。\n\n### yum安装\n\n* 一种在线软件安装方式，本质上还是rpm安装，自动下载安装包并安装，安装过程中自动解决库。\n\n### 依赖问题源码编译安装\n\n* 软件以源码工程的形式发布，需要自己编译打包。\n\n## 安装jdk\n\n* ![image-20221020193314416](http://qny.expressisland.cn/schoolOpens/image-20221020193314416.png)\n\n### 上传jdk文件\n\n* finalshell可以直接上传文件：\n  * ![image-20221020193624982](http://qny.expressisland.cn/schoolOpens/image-20221020193624982.png)\n\n* ![image-20221020193502254](http://qny.expressisland.cn/schoolOpens/image-20221020193502254.png)\n* ![image-20221020193945836](http://qny.expressisland.cn/schoolOpens/image-20221020193945836.png)\n\n### 解压jdk\n\n* `tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/local`\n* ![image-20221020194259262](http://qny.expressisland.cn/schoolOpens/image-20221020194259262.png)\n\n### 配置环境变量\n\n* `vim /etc/profile`\n* `shift + g` 定位到文件末尾\n* 点击 `i键` 进入插入模式\n* 输入以下两行变量：\n\n```bash\nJAVA_HOME=/usr/local/jdk1.8.0_171\n\nPATH=$JAVA_HOME/bin:$PATH\n```\n\n* `esc`返回，`:wq`保存退出。\n* 重新加载profile文件，使更改的配置立即生效，命令为`source /etc/profile`\n* 检查安装是否成功，命令为`java -version`\n  * ![image-20221020195212049](http://qny.expressisland.cn/schoolOpens/image-20221020195212049.png)\n\n## 安装Tomcat\n\n* ![image-20221020195254286](http://qny.expressisland.cn/schoolOpens/image-20221020195254286.png)\n\n### 上传和解压tomcat\n\n* ![image-20221020195441146](http://qny.expressisland.cn/schoolOpens/image-20221020195441146.png)\n* 解压安装包：`tar -zxvf apache-tomcat-7.0.57.tar.gz -C /usr/local`\n* ![image-20221020195641415](http://qny.expressisland.cn/schoolOpens/image-20221020195641415.png)\n\n### 进入Tomcat的bin目录启动服务\n\n*  `cd apache-tomcat-7.0.57/`\n*  `cd bin`\n*  ![image-20221020195902495](http://qny.expressisland.cn/schoolOpens/image-20221020195902495.png)\n\n*  进入Tomcat的bin目录启动服务，命令为`sh startup.sh`或者`./startup.sh`\n*  ![image-20221020195938025](http://qny.expressisland.cn/schoolOpens/image-20221020195938025.png)\n\n### 验证Tomcat启动是否成功\n\n* ![image-20221020200020051](http://qny.expressisland.cn/schoolOpens/image-20221020200020051.png)\n\n#### 查看启动日志\n\n* 先回到tomcat文件夹根目录下，再`cd logs/`\n* ![image-20221020200522713](http://qny.expressisland.cn/schoolOpens/image-20221020200522713.png)\n* `more /usr/local/apache-tomcat-7.0.57/logs/catalina.out`\n* 无异常信息，出现端口号则为运行成功\n  * ![image-20221020200630290](http://qny.expressisland.cn/schoolOpens/image-20221020200630290.png)\n* 也可以用`tail -50 /usr/local/apache-tomcat-7.0.57/logs/catalina.out`\n\n#### 查看进程 `ps -ef|grep tomcat`\n\n*  `ps -ef|grep tomcat`\n*  ![image-20221020201003127](http://qny.expressisland.cn/schoolOpens/image-20221020201003127.png)\n\n### 防火墙操作\n\n* 查看防火墙状态（systemctl status firewalld、firewall-cmd --state）\n\n* 暂时关闭防火墙（systemctl stop firewalld）\n\n* 永久关闭防火墙（systemctl disable firewalld）\n\n* 开启防火墙（systemctl start firewalld）\n\n* 开放指定端口（firewall-cmd --zone=public --add-port=8080/tcp --permanent）\n\n* 关闭指定端口（firewall-cmd --zone=public --remove-port=8080/tcp --permanent）\n\n* 立即生效（firewall-cmd --reload）\n\n* 查看开放的端口（firewall-cmd --zone=public --list-ports）\n\n  <hr>\n\n* 注意：\n\n  * systemctl是管理Linux中服务的命令，可以对服务进行启动、停止、重启、查看状态等操作。\n  * firewall-cmd是Linux中专门用于控制防火墙的命令。\n  * 为了保证系统安全，服务器的防火墙不建议关闭。\n\n#### 暂时关闭防火墙\n\n* `systemctl stop firewalld`\n\n* ![image-20221020201737483](http://qny.expressisland.cn/schoolOpens/image-20221020201737483.png)\n* 输入域名http://192.168.206.130:8080/，能访问成功：\n  * ![image-20221020201851660](http://qny.expressisland.cn/schoolOpens/image-20221020201851660.png)\n\n#### 开放指定端口\n\n* `firewall-cmd --zone=public --add-port=8080/tcp --permanent`\n* 立即生效：`firewall-cmd --reload`\n  * ![image-20221020202204332](http://qny.expressisland.cn/schoolOpens/image-20221020202204332.png)\n  * 输入域名http://192.168.206.130:8080/，能访问成功：\n    * ![image-20221020201851660](http://qny.expressisland.cn/schoolOpens/image-20221020201851660.png)\n\n#### 查看开放的端口\n\n* `firewall-cmd --zone=public --list-ports`\n* ![image-20221020202337238](http://qny.expressisland.cn/schoolOpens/image-20221020202337238.png)\n\n### 停止tomcat服务\n\n* ![image-20221020202519960](http://qny.expressisland.cn/schoolOpens/image-20221020202519960.png)\n\n#### 运行Tomcat的bin目录中提供的停止服务的脚本文件shutdown.sh\n\n* `sh shutdown.sh`\n* `./shutdown.sh`\n* ![image-20221020202743571](http://qny.expressisland.cn/schoolOpens/image-20221020202743571.png)\n\n#### 结束Tomcat进程 —— 查看Tomcat进程，获得进程id\n\n* 执行命令结束进程`kill -9 XXXXX`\n* ![image-20221020203120871](http://qny.expressisland.cn/schoolOpens/image-20221020203120871.png)\n\n## 安装MySQL\n\n* ![image-20221020203228529](http://qny.expressisland.cn/schoolOpens/image-20221020203228529.png)\n* 注意事项：如果当前系统中已经安装有MySQL数据库，安装将失败。CentoS7自带mariadb，与MySQL数据库冲突。\n\n### rpm -qa | grep mysql\n\n### rpm -qa | grep mariadb\n\n* ![image-20221020203703796](http://qny.expressisland.cn/schoolOpens/image-20221020203703796.png)\n* 有mariadb，没有mysql。\n* 移除mariadb。\n\n### 卸载已经安装的冲突软件 —— 移除mariadb\n\n* ![image-20221020203817067](http://qny.expressisland.cn/schoolOpens/image-20221020203817067.png)\n* `rpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64`\n* ![image-20221020203913721](http://qny.expressisland.cn/schoolOpens/image-20221020203913721.png)\n* 现在mariadb移除掉了。\n\n### 将资料中提供的MySQL安装包上传到Linux并解压\n\n* ![image-20221020204012847](http://qny.expressisland.cn/schoolOpens/image-20221020204012847.png)\n* `mkdir /usr/local/mysql`\n* `tar -zxvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar.gz -C /usr/local/mysql`\n* ![image-20221020204305809](http://qny.expressisland.cn/schoolOpens/image-20221020204305809.png)\n* ![image-20221020204317209](http://qny.expressisland.cn/schoolOpens/image-20221020204317209.png)\n\n### 按照顺序安装rpm软件包\n\n* ![image-20221020204505084](http://qny.expressisland.cn/schoolOpens/image-20221020204505084.png)\n\n```sql\n* rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm\n* rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm\n* rpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpm\n* rpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpm\n* rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm\n* yum install net-tools\n* rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm\n\n* yum update   --通过指令升级现有软件及系统内核\n```\n\n### 启动mysql\n\n* ![image-20221020205300701](http://qny.expressisland.cn/schoolOpens/image-20221020205300701.png)\n\n#### 查看mysql服务状态\n\n* `systemctl status mysqld`\n* ![image-20221020205705667](http://qny.expressisland.cn/schoolOpens/image-20221020205705667.png)\n\n#### 启动mysql服务\n\n* `systemctl start mysqld`\n* ![image-20221020205829894](http://qny.expressisland.cn/schoolOpens/image-20221020205829894.png)\n* ![image-20221020205928621](http://qny.expressisland.cn/schoolOpens/image-20221020205928621.png)\n\n#### 开机启动mysql服务\n\n* `systemctl enable mysqld`\n\n#### 查看已经启动的服务\n\n* `netstat -tunlp`\n  * ![image-20221020210154488](http://qny.expressisland.cn/schoolOpens/image-20221020210154488.png)\n* `netstat -tunlp | grep mysql`\n  * ![image-20221020210324728](http://qny.expressisland.cn/schoolOpens/image-20221020210324728.png)\n\n#### 查看mysql进程\n\n* `ps -ef | grep mysql`\n  * ![image-20221020210352160](http://qny.expressisland.cn/schoolOpens/image-20221020210352160.png)\n\n#### 登录MySQL数据库，查阅临时密码\n\n* ![image-20221021191611342](http://qny.expressisland.cn/schoolOpens/image-20221021191611342.png)\n* 注意事项：冒号后面的是密码，注意空格\n* `cat /var/log/mysqld.log | grep password`\n* ![image-20221021191818779](http://qny.expressisland.cn/schoolOpens/image-20221021191818779.png)\n* 临时密码：iTeBuy)ue7er\n\n#### 登录MySQL，修改密码，开放访问权限\n\n* ![image-20221021191907744](http://qny.expressisland.cn/schoolOpens/image-20221021191907744.png)\n* set global validate_password_length=4;\n* set global validate_password_policy=LOW;\n* set password = password(\'root\');\n* `grant all on *.* to \'root\'@\'%\' identified by \'root\';`\n* `flush privileges;`\n\n### 外部连接数据库（Navicat）\n\n* 开启3306端口号\n\n* ![image-20221021195620151](http://qny.expressisland.cn/schoolOpens/image-20221021195620151.png)\n* reload\n* ![image-20221021195929004](http://qny.expressisland.cn/schoolOpens/image-20221021195929004.png)\n\n#### 连接成功\n\n* ![image-20221021195950482](http://qny.expressisland.cn/schoolOpens/image-20221021195950482.png)\n* ![image-20221021200002571](http://qny.expressisland.cn/schoolOpens/image-20221021200002571.png)\n\n## 安装lrzsz —— 文件上传、下载\n\n* 搜索lrzsz安装包，命令为`yum list lrzsz`\n* 使用yum命令在线安装，命令为`yum install lrzsz.x86_64`\n* ![image-20221021200059141](http://qny.expressisland.cn/schoolOpens/image-20221021200059141.png)\n\n### `rz` —— “选择上传文件”\n\n* ![image-20221021200421320](http://qny.expressisland.cn/schoolOpens/image-20221021200421320.png)\n* ![image-20221021200427162](http://qny.expressisland.cn/schoolOpens/image-20221021200427162.png)\n\n# 项目部署\n\n## 手工部署项目\n\n### ① 在IDEA中开发SpringBoot项目并打成jar包\n\n### ② 将jar包上传到Linux服务器\n\n```sql\nmkdir /usr/local/app                      --创建目录，将项目jar包放到此目录\n```\n\n### ③ 启动SpringBoot程序\n\n* `java -jar hello.jar`\n\n![image-20221021202952173](http://qny.expressisland.cn/schoolOpens/image-20221021202952173.png)\n\n### ④ 检查防火墙，确保8080端口对外开放，访问SpringBoot项目\n\n* ![image-20221021203021885](http://qny.expressisland.cn/schoolOpens/image-20221021203021885.png)\n\n### ⑤ 改为后台运行SpringBoot程序，并将日志输出到日志文件\n\n* 目前程序运行的问题：\n  * 线上程序不会采用控制台霸屏的形式运行程序，而是将程序在后台运行；\n  * 线上程序不会将日志输出到控制台，而是输出到日志文件，方便运维查阅信息。\n* ![image-20221021203210593](http://qny.expressisland.cn/schoolOpens/image-20221021203210593.png)\n\n### ⑥ 停止SpringBoot程序\n\n* ![image-20221021203630842](http://qny.expressisland.cn/schoolOpens/image-20221021203630842.png)\n\n## 通过Shell脚本自动部署项目\n\n* 在Linux中安装Git\n* 在Linux中安装maven\n* 编写Shell脚本（拉取代码、编译、打包、启动）\n* 为用户授予执行Shell脚本的权限\n* 执行Shell脚本\n\n![image-20221021203743496](http://qny.expressisland.cn/schoolOpens/image-20221021203743496.png)\n\n### ① 在Linux中安装Git\n\n```sql\nyum list git          --列出git安装包\nyum install git      --在线安装git\n```\n\n### ② 使用Git克隆代码\n\n```sql\ncd /usr/local/\ngit clone https://gitee.com/xxxxxxx/xxxxx.git\n```\n\n### ③ 将资料中提供的maven安装包上传到Linux，在Linux中安装maven\n\n* ![image-20221021204540423](http://qny.expressisland.cn/schoolOpens/image-20221021204540423.png)\n\n```sql\ntar -zxvf apache-maven-3.5.4-bin.tar.gz -C /usr/local\nvim /etc/profile\n\nexport MAVEN_HOME=/usr/local/apache-maven-3.5.4\nexport PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH\n\nsource /etc/profile\nmvn -version\nvim /usr/local/apache-maven-3.5.4/conf/settings.xml\n<localRepository>/usr/local/repo</localRepository>\n```\n\n### ④ 将资料中提供的Shell脚本文件复制到Linux —— bootstart.sh\n\n* Shell脚本（shell script），是一种Linux系统中的脚本程序。\n* 使用Shell脚本编程跟JavaScript、 Java编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。\n\n#### bootstart.sh\n\n```shell\n#!/bin/sh\necho =================================\necho  自动化部署脚本启动\necho =================================\n\necho 停止原来运行中的工程\nAPP_NAME=helloworld\n\ntpid=`ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk \'{print $2}\'`\nif [ ${tpid} ]; then\n    echo \'Stop Process...\'\n    kill -15 $tpid\nfi\nsleep 2\ntpid=`ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk \'{print $2}\'`\nif [ ${tpid} ]; then\n    echo \'Kill Process!\'\n    kill -9 $tpid\nelse\n    echo \'Stop Success!\'\nfi\n\necho 准备从Git仓库拉取最新代码\ncd /usr/local/helloworld\n\necho 开始从Git仓库拉取最新代码\ngit pull\necho 代码拉取完成\n\necho 开始打包\noutput=`mvn clean package -Dmaven.test.skip=true`\n\ncd target\n\necho 启动项目\nnohup java -jar helloworld-1.0-SNAPSHOT.jar &> helloworld.log &\necho 项目启动完成\n```\n\n#### 新建脚本\n\n* ![image-20221021205812301](http://qny.expressisland.cn/schoolOpens/image-20221021205812301.png)\n\n### ⑤ 为用户授权\n\n* chmod（change mode）命令是控制用户对文件的权限的命令。\n* Linux中的权限分为：读（r）、写（w）、执行（x）三种权限。\n* Linux的文件调用权限分为三级：文件所有者（Owner）、用户组（Group）、其它用户（Other users）。\n* 只有文件的所有者和超级用户可以修改文件或目录的权限。\n* 要执行Shell脚本需要有对此脚本文件的执行权限，如果没有则不能执行。\n\n![image-20221021210020890](http://qny.expressisland.cn/schoolOpens/image-20221021210020890.png)\n\n#### chmod命令可以使用八进制数来指定权限\n\n* ![image-20221021210903538](http://qny.expressisland.cn/schoolOpens/image-20221021210903538.png)\n* ![image-20221021210911717](http://qny.expressisland.cn/schoolOpens/image-20221021210911717.png)\n* ![image-20221021211128820](http://qny.expressisland.cn/schoolOpens/image-20221021211128820.png)\n\n### ⑥ 设置静态ip\n\n* ![image-20221021211428842](http://qny.expressisland.cn/schoolOpens/image-20221021211428842.png)\n* ![image-20221021211437921](http://qny.expressisland.cn/schoolOpens/image-20221021211437921.png)\n\n```sql\nBOOTPROTo=\"static\"         # 使用静态IP地址，默认为dhcp\n\nIPADDR=\"192.168.138.100\"       # 设置的静态IP地址\n\nNETMASK=\"255.255.255.0\"       # 子网掩码\n\nGATEWAY=\"192.168.138.2\"      # 网关地址\n\nDNS1=\"192.168.138.2\"             # DNS服务器\n```\n\n### ⑦ 重启网络服务\n\n* `systemctl restart network`\n* ![image-20221021212827885](http://qny.expressisland.cn/schoolOpens/image-20221021212827885.png)\n* 注意：重启完网络服务后ip地址已经发生了改变，此时FinalShell已经连接不上Linux系统，需要创建一个新连接才能连接到Linux。', 5, '是', '2022-11-03 07:29:18', '', '1', 'f88ef56e2c2c43cebf71803ea72c1a12');
INSERT INTO `t_blog` VALUES ('7901df63ea19436c815101a6c4b42eb1', '# 12345678910', '# 12345678...', '# 12345678910', 4, '是', '2022-11-03 07:36:33', '', '1', '8f801f8e82544bd89e69f1875ae45f0b');
INSERT INTO `t_blog` VALUES ('e70415e8f78648ef9f4a8170e41afa43', 'SQL必知必会 （牛客）', 'SQL必知必会 ', 'SQL必知必会 （牛客）\n<!--more-->\n\n# SQL必知必会 （牛客）\n\n## 01检索数据\n\n```sql\n--SQL60 从 Customers 表中检索所有的 ID\nselect cust_id from Customers ;\n\n--SQL61 检索并列出已订购产品的清单\n--检索并列出所有已订购商品（prod_id）的去重后的清单\nselect distinct prod_id from OrderItems;\n\n--SQL62 检索所有列\nselect * from Customers;\n```\n\n## 02排序检索数据\n\n```sql\n--SQL63 检索顾客名称并且排序\n\n--从 Customers 中检索所有的顾客名称（cust_name），并按从 Z 到 A 的顺序显示结果\nselect cust_name from Customers order by cust_name DESC;\n\n--SQL64 对顾客ID和日期排序\n--从 Orders 表中检索顾客 ID（cust_id）和订单号（order_num），并先按顾客 ID 对结果进行排序，再按订单日期倒序排列。\nselect \n    cust_id,order_num \n    from \nOrders order by cust_id, order_date desc;\n\n--SQL65 按照数量和价格排序\n--显示 OrderItems 表中的数量（quantity）和价格（item_price），并按数量由多到少、价格由高到低排序。\nselect \n    quantity,item_price \n    from \nOrderItems\n    order by quantity desc,item_price desc;\n		\n--SQL66 检查SQL语句\n--下面的 SQL;语句有问题吗？尝试将它改正确，使之能够正确运行，并且返回结果根据vend_name逆序排列\nSELECT vend_name\n    FROM Vendors \n    ORDER by vend_name DESC;\n```\n\n## 03过滤数据\n\n```sql\n--SQL67 返回固定价格的产品\n--从 Products 表中检索产品 ID（prod_id）和产品名称（prod_name），只返回价格为 9.49 美元的产品。\nselect prod_id,prod_name from Products where prod_price=9.49;\n\n--SQL68 返回更高价格的产品\n--从 Products 表中检索产品 ID（prod_id）和产品名称（prod_name），只返回价格为 9 美元或更高的产品。\nselect prod_id,prod_name from Products where prod_price >= 9;\n\n--SQL69 返回产品并且按照价格排序\nselect \n    prod_name,prod_price \n    from \nProducts \n    where \n    prod_price >=3 and prod_price <=6\n    order by \n    prod_price;\n		\n\n--SQL70 返回更多的产品\n--从 OrderItems 表中检索出所有不同且不重复的订单号（order_num），其中每个订单都要包含 100 个或更多的产品。\nselect order_num from OrderItems\n    group by order_num\n    having sum(quantity)>=100;\n```\n\n## 04高级数据过滤\n\n```sql\n--SQL71 检索供应商名称\n--从 Vendors 表中检索供应商名称（vend_name），仅返回加利福尼亚州的供应商（这需要按国家[USA]和州[CA]进行过滤，没准其他国家也存在一个CA）\nselect vend_name \n	from Vendors \n	where vend_state = \'CA\' \n	AND vend_country = \'USA\';\n	\n--SQL72 检索并列出已订购产品的清单\n--查找所有订购了数量至少100 个的 BR01、BR02 或BR03 的订单。你需要返回 OrderItems 表的订单号（order_num）、产品 ID（prod_id）和数量（quantity），并按产品 ID 和数量进行过滤。\nselect order_num,prod_id,quantity \n    from OrderItems \n    where prod_id \n    in(\'BR01\',\'BR02\',\'BR03\') and quantity >=100;\n		\n--SQL73 返回所有价格在 3美元到 6美元之间的产品的名称和价格\n--返回所有价格在 3美元到 6美元之间的产品的名称（prod_name）和价格（prod_price），使用 AND操作符，然后按价格对结果进行升序排序\nselect prod_name,prod_price \n    from Products\n    where prod_price >=3 \n    And prod_price <=6\n    order by prod_price;\n		\n\n--SQL74 纠错2\nSELECT vend_name \n    FROM Vendors \n    WHERE vend_country = \'USA\' AND vend_state = \'CA\'\n    ORDER BY vend_name ;\n```\n\n## 05用通配符进行过滤\n\n```sql\n--SQL75 检索产品名称和描述（一）\n--从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中包含 toy 一词的产品名称\nselect prod_name,prod_desc \n    from Products\n    where prod_desc like \'%toy%\';\n		\n\n--SQL76 检索产品名称和描述（二）\n--从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中未出现 toy 一词的产品，最后按”产品名称“对结果进行排序。\nselect prod_name,prod_desc \n    from Products\n    where prod_desc not like \'%toy%\'\n    order by prod_name;\n		\n--SQL77 检索产品名称和描述（三）\n--从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中同时出现 toy 和 carrots 的产品。有好几种方法可以执行此操作，但对于这个挑战题，请使用 AND 和两个 LIKE 比较。\nselect prod_name,prod_desc \n    from Products\n    where prod_desc like \'%toy%\' and prod_desc like \'%carrots%\';\n		\n\n--SQL78 检索产品名称和描述（四）\n--从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回在描述中以先后顺序同时出现 toy 和 carrots 的产品。提示：只需要用带有三个 % 符号的 LIKE 即可。\nselect prod_name,prod_desc \n    from Products\n    where prod_desc like \'%toy%\' and prod_desc like \'%carrots%\' \n    order by prod_desc desc;\n```\n\n## 06创建计算字段\n\n```sql\n--SQL79 别名\n--从 Vendors 表中检索vend_id、vend_name、vend_address 和 vend_city，将 vend_name重命名为 vname，将 vend_city 重命名为 vcity，将 vend_address重命名为 vaddress，按供应商名称对结果进行升序排序。\nselect vend_id,vend_name as vname,\n    vend_address as vaddress,vend_city as vcity\n    from Vendors\n    ORDER BY vend_name;\n		\n				\n--SQL80 打折\n--我们的示例商店正在进行打折促销，所有产品均降价 10%。Products表包含prod_id产品id、prod_price产品价格\n--【问题】编写 SQL语句，从 Products 表中返回 prod_id、prod_price 和 sale_price。sale_price 是一个包含促销价格的计算字段。\n--提示：可以乘以 0.9，得到原价的 90%（即 10%的折扣）\n--【示例结果】返回产品id prod_id、产品价格prod_price、销售价格 sale_price\n\nselect prod_id,prod_price,\n    prod_price*0.9 as sale_price\n    from Products;\n```\n\n## 07使用函数处理数据\n\n```sql\n--SQL81 顾客登录名\n--返回顾客 ID（cust_id）、顾客名称（cust_name）和登录名（user_login），其中登录名全部为大写字母，并由顾客联系人的前两个字符（cust_contact）和其所在城市的前三个字符（cust_city）组成。提示：需要使用函数、拼接和别名。\n\n--1、字符串的截取：substring(字符串，起始位置，截取字符数）\n--2 、 字符串的拼接 ： concat(字符串1 ， 字符串2 ， 字符串3, …)\n--3 、 字母大写 ： upper(字符串）\nselect\n  cust_id,\n  cust_name,\n  concat(\n    upper(left(cust_name, 2)),\n    upper(left(cust_city, 3))\n  ) user_login\nfrom\n  Customers;\n	\n	\n\n--SQL82 返回 2020 年 1 月的所有订单的订单号和订单日期\n--返回 2020 年 1 月的所有订单的订单号（order_num）和订单日期（order_date），并按订单日期升序排序\n\nselect\n  order_num,\n  order_date\nfrom\n  Orders\n  where month(order_date) = 1 \n  and year(order_date) = 2020\n  order by order_date;\n```\n\n## 08汇总数据\n\n```sql\n--SQL83 确定已售出产品的总数\n--OrderItems表代表售出的产品，quantity代表售出商品数量。\n--写 SQL 语句，确定已售出产品的总数。\n--返回items_ordered列名，表示已售出商品的总数。\n\nselect SUM(quantity)items_ordered from OrderItems;\n\n\n--SQL84 确定已售出产品项 BR01 的总数\n--OrderItems表代表售出的产品，quantity代表售出商品数量，产品项为prod_id。\n--【问题】修改创建的语句，确定已售出产品项（prod_id）为\"BR01\"的总数。\n--【示例结果】返回商品项已订购订单数\n\nselect SUM(quantity)items_ordered \n	from OrderItems\n		where prod_id = \'BR01\';\n\n\n\n--SQL85 确定 Products 表中价格不超过 10 美元的最贵产品的价格\n--编写 SQL 语句，确定 Products 表中价格不超过 10 美元的最贵产品的价格（prod_price）。将计算所得的字段命名为 max_price。\n--返回十元以下最高价格max_price。\n\nselect max(prod_price) \n	as max_price \n		from Products\n			where prod_price <= 10 ;\n```\n\n## 09分组数据\n\n```sql\n--SQL86 返回每个订单号各有多少行数\n--OrderItems 表包含每个订单的每个产品\n--编写 SQL 语句，返回每个订单号（order_num）各有多少行数（order_lines），并按 order_lines对结果进行升序排序。\n--返回订单号order_num和对应订单号的行数order_lines\n\nselect order_num,COUNT(order_num) AS order_lines \n    from OrderItems \n	GROUP BY order_num\n		order by order_lines;\n		\n		\n		\n--SQL87 每个供应商成本最低的产品\n--有Products表，含有字段prod_price代表产品价格，vend_id代表供应商id\n--编写 SQL 语句，返回名为 cheapest_item 的字段，该字段包含每个供应商成本最低的产品（使用 Products 表中的 prod_price），然后从最低成本到最高成本对结果进行升序排序。\n--返回供应商id vend_id和对应供应商成本最低的产品cheapest_item。\n\nselect vend_id,MIN(prod_price) AS cheapest_item\n    from Products \n	GROUP BY vend_id\n		order by cheapest_item;\n				\n\n--SQL88 返回订单数量总和不小于100的所有订单的订单号\n--OrderItems代表订单商品表，包括：订单号order_num和订单数量quantity。\n--请编写 SQL 语句，返回订单数量总和不小于100的所有订单号，最后结果按照订单号升序排序。\n--返回order_num订单号。\n\nselect order_num\n    from OrderItems \n	WHERE quantity >= 100\n		order by order_num;\n				\n				\n--SQL89 计算总和\n--OrderItems表代表订单信息，包括字段：订单号order_num和item_price商品售出价格、quantity商品数量。\n--编写 SQL 语句，根据订单号聚合，返回订单总价不小于1000 的所有订单号，最后的结果按订单号进行升序排序。\n--提示：总价 = item_price 乘以 quantity\n\n\nselect order_num,sum(item_price*quantity) as total_price\n    from OrderItems \n        group by order_num\n	having  total_price >= 1000 \n		order by order_num;\n\n\n\n\n--SQL90 纠错3\n--OrderItems表含有order_num订单号\n--返回订单号order_num和出现的次数items\n\nSELECT\n  order_num,\n  COUNT(*) AS items\nFROM\n  OrderItems\nGROUP BY\n  order_num\nHAVING\n  COUNT(*) >= 3\nORDER BY\n  order_num;\n```\n\n', 3, '是', '2022-11-03 07:29:39', 'http://qny.expressisland.cn/schoolOpens/f94259f13c2497da9cf94ef774e514a9.jpg', '1', '8f801f8e82544bd89e69f1875ae45f0b');

-- ----------------------------
-- Table structure for t_category
-- ----------------------------
DROP TABLE IF EXISTS `t_category`;
CREATE TABLE `t_category`  (
  `id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'ID',
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '名称',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_category
-- ----------------------------
INSERT INTO `t_category` VALUES ('1', 'Java');
INSERT INTO `t_category` VALUES ('2', 'JavaScript');
INSERT INTO `t_category` VALUES ('2ad568e4f5f44131ad6c8fa55f4f0e63', '计算机网络');
INSERT INTO `t_category` VALUES ('4c8f0ac812024c04ba447f313405663f', '操作系统');
INSERT INTO `t_category` VALUES ('61f594724c1e4c399243b19a6399ad4e', '数据库');
INSERT INTO `t_category` VALUES ('8e3607022a3b42499d2e1921e0289132', '数据结构');
INSERT INTO `t_category` VALUES ('8f801f8e82544bd89e69f1875ae45f0b', '测试');
INSERT INTO `t_category` VALUES ('a5ff4f5e96984604af8d07ea61f57ada', 'C语言');
INSERT INTO `t_category` VALUES ('eb8e2df26ec7401b9b2a9eaae095f41c', '杂谈');
INSERT INTO `t_category` VALUES ('f88ef56e2c2c43cebf71803ea72c1a12', '其他');

-- ----------------------------
-- Table structure for t_user
-- ----------------------------
DROP TABLE IF EXISTS `t_user`;
CREATE TABLE `t_user`  (
  `id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'ID',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '头像',
  `nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '昵称',
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '用户名',
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '密码',
  `role` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '角色',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_user
-- ----------------------------
INSERT INTO `t_user` VALUES ('1', 'https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png', 'admin', 'admin', '123456', '管理员');
INSERT INTO `t_user` VALUES ('2', 'https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png', 'user1', 'user1', '123456', '普通用户');
INSERT INTO `t_user` VALUES ('5a8f78942c3d41e2ac598b5090de8ab3', NULL, '1103', '1103', '1103', '测试');
INSERT INTO `t_user` VALUES ('82a777473ffe48439db5ef832fd6e48d', NULL, 'test1', 'test1', '1234', 'test1');
INSERT INTO `t_user` VALUES ('844dca27ff124cf59d9b830375a05ab7', NULL, 'test2', 'test2', '3334', 'test2');

SET FOREIGN_KEY_CHECKS = 1;
